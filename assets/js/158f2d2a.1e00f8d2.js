"use strict";(self.webpackChunkgimly_site_docs=self.webpackChunkgimly_site_docs||[]).push([[2653],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return g}});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),l=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(r),m=n,g=p["".concat(c,".").concat(m)]||p[m]||d[m]||o;return r?a.createElement(g,s(s({ref:t},u),{},{components:r})):a.createElement(g,s({ref:t},u))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,s=new Array(o);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:n,s[1]=i;for(var l=2;l<o;l++)s[l]=r[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},91964:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p}});var a=r(87462),n=r(63366),o=(r(67294),r(3905)),s=["components"],i={id:"core-types.idatastoreorm.datastoreormgetmessagescount",title:"IDataStoreORM.dataStoreORMGetMessagesCount() method",hide_title:!0},c=void 0,l={unversionedId:"api/core-types.idatastoreorm.datastoreormgetmessagescount",id:"api/core-types.idatastoreorm.datastoreormgetmessagescount",title:"IDataStoreORM.dataStoreORMGetMessagesCount() method",description:"IDataStoreORM.dataStoreORMGetMessagesCount() method",source:"@site/docs/api/core-types.idatastoreorm.datastoreormgetmessagescount.md",sourceDirName:"api",slug:"/api/core-types.idatastoreorm.datastoreormgetmessagescount",permalink:"/docs/api/core-types.idatastoreorm.datastoreormgetmessagescount",draft:!1,tags:[],version:"current",frontMatter:{id:"core-types.idatastoreorm.datastoreormgetmessagescount",title:"IDataStoreORM.dataStoreORMGetMessagesCount() method",hide_title:!0}},u={},p=[{value:"IDataStoreORM.dataStoreORMGetMessagesCount() method",id:"idatastoreormdatastoreormgetmessagescount-method",level:2},{value:"Parameters",id:"parameters",level:2}],d={toc:p},m="wrapper";function g(e){var t=e.components,r=(0,n.Z)(e,s);return(0,o.kt)(m,(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"idatastoreormdatastoreormgetmessagescount-method"},"IDataStoreORM.dataStoreORMGetMessagesCount() method"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.")),(0,o.kt)("p",null,"Returns a count of ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/core-types.imessage"},"IMessage"),"s that match the given filter. These are messages that were stored using ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/core-types.idatastore.datastoresavemessage"},"dataStoreSaveMessage"),"."),(0,o.kt)("b",null,"Signature:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"dataStoreORMGetMessagesCount(args: FindMessagesArgs, context: AuthorizedDIDContext): Promise<number>;\n")),(0,o.kt)("h2",{id:"parameters"},"Parameters"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"args"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/api/core-types.findmessagesargs"},"FindMessagesArgs")),(0,o.kt)("td",{parentName:"tr",align:null},"The filter to apply when querying.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"context"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/api/core-types.authorizeddidcontext"},"AuthorizedDIDContext")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("p",null,"Can be used to signal that only a particular DID is authorized to perform this operation. This will cause the result to only contain data that this DID should be able to access."),(0,o.kt)("p",null,"This API may change without a BREAKING CHANGE notice."))))),(0,o.kt)("b",null,"Returns:"),(0,o.kt)("p",null,"Promise","<","number",">"))}g.isMDXComponent=!0}}]);