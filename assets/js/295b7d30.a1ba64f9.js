"use strict";(self.webpackChunkgimly_site_docs=self.webpackChunkgimly_site_docs||[]).push([[58118],{3905:function(e,t,r){r.d(t,{Zo:function(){return o},kt:function(){return f}});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var d=n.createContext({}),p=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},o=function(e){var t=p(e.components);return n.createElement(d.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,d=e.parentName,o=l(e,["components","mdxType","originalType","parentName"]),c=p(r),u=i,f=c["".concat(d,".").concat(u)]||c[u]||g[u]||a;return r?n.createElement(f,s(s({ref:t},o),{},{components:r})):n.createElement(f,s({ref:t},o))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,s=new Array(a);s[0]=u;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[c]="string"==typeof e?e:i,s[1]=l;for(var p=2;p<a;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},37526:function(e,t,r){r.r(t),r.d(t,{assets:function(){return o},contentTitle:function(){return d},default:function(){return f},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c}});var n=r(87462),i=r(63366),a=(r(67294),r(3905)),s=["components"],l={id:"credential-ld.credentialissuerld",title:"CredentialIssuerLD class",hide_title:!0},d=void 0,p={unversionedId:"api/credential-ld.credentialissuerld",id:"api/credential-ld.credentialissuerld",title:"CredentialIssuerLD class",description:"CredentialIssuerLD class",source:"@site/docs/api/credential-ld.credentialissuerld.md",sourceDirName:"api",slug:"/api/credential-ld.credentialissuerld",permalink:"/docs/api/credential-ld.credentialissuerld",draft:!1,editUrl:"https://github.com/uport-project/gimly-website/edit/main/docs/api/credential-ld.credentialissuerld.md",tags:[],version:"current",frontMatter:{id:"credential-ld.credentialissuerld",title:"CredentialIssuerLD class",hide_title:!0}},o={},c=[{value:"CredentialIssuerLD class",id:"credentialissuerld-class",level:2},{value:"Constructors",id:"constructors",level:2},{value:"Properties",id:"properties",level:2},{value:"Methods",id:"methods",level:2}],g={toc:c},u="wrapper";function f(e){var t=e.components,r=(0,i.Z)(e,s);return(0,a.kt)(u,(0,n.Z)({},g,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"credentialissuerld-class"},"CredentialIssuerLD class"),(0,a.kt)("p",null,"A Gimly plugin that implements the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api/credential-ld.icredentialissuerld"},"ICredentialIssuerLD")," methods."),(0,a.kt)("b",null,"Signature:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export declare class CredentialIssuerLD implements IAgentPlugin\n")),(0,a.kt)("b",null,"Implements:")," [IAgentPlugin](/docs/api/core-types.iagentplugin)",(0,a.kt)("h2",{id:"constructors"},"Constructors"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Constructor"),(0,a.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/credential-ld.credentialissuerld._constructor_"},"(constructor)(options)")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Constructs a new instance of the ",(0,a.kt)("code",null,"CredentialIssuerLD")," class")))),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/credential-ld.credentialissuerld.methods"},"methods")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"readonly")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/credential-ld.icredentialissuerld"},"ICredentialIssuerLD")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/credential-ld.credentialissuerld.schema"},"schema")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"readonly")),(0,a.kt)("td",{parentName:"tr",align:null},"{ components: { schemas: { ICreateVerifiableCredentialLDArgs: { type: string; properties: { credential: { $ref: string; description: string; }; keyRef: { type: string; description: string; }; fetchRemoteContexts: { type: string; description: string; }; }; required: string","[","]",'; additionalProperties: { description: string; }; description: string; }; CredentialPayload: { type: string; properties: { issuer: { $ref: string; }; credentialSubject: { $ref: string; }; type: { type: string; items: { type: string; }; }; "@context": { $ref: string; }; issuanceDate: { $ref: string; }; expirationDate: { $ref: string; }; credentialStatus: { $ref: string; }; id: { type: string; }; }; required: string',"[","]","; description: string; }; IssuerType: { anyOf: ({ type: string; properties: { id: { type: string; }; }; required: string","[","]","; } ","|"," { type: string; properties?: undefined; required?: undefined; })","[","]","; description: string; }; CredentialSubject: { type: string; properties: { id: { type: string; }; }; description: string; }; ContextType: { anyOf: ({ type: string; items?: undefined; } ","|"," { type: string; items: { anyOf: { type: string; }","[","]","; }; })","[","]","; description: string; }; DateType: { type: string; description: string; }; CredentialStatusReference: { type: string; properties: { id: { type: string; }; type: { type: string; }; }; required: string","[","]","; description: string; }; VerifiableCredential: { type: string; properties: { proof: { $ref: string; }; issuer: { $ref: string; }; credentialSubject: { $ref: string; }; type: { anyOf: ({ type: string; items: { type: string; }; } ","|"," { type: string; items?: undefined; })","[","]",'; }; "@context": { $ref: string; }; issuanceDate: { type: string; }; expirationDate: { type: string; }; credentialStatus: { $ref: string; }; id: { type: string; }; }; required: string',"[","]","; description: string; }; ProofType: { type: string; properties: { type: { type: string; }; }; description: string; }; ICreateVerifiablePresentationLDArgs: { type: string; properties: { presentation: { $ref: string; description: string; }; challenge: { type: string; description: string; }; domain: { type: string; description: string; }; keyRef: { type: string; description: string; }; fetchRemoteContexts: { type: string; description: string; }; }; required: string","[","]",'; additionalProperties: { description: string; }; description: string; }; PresentationPayload: { type: string; properties: { holder: { type: string; }; verifiableCredential: { type: string; items: { $ref: string; }; }; type: { type: string; items: { type: string; }; }; "@context": { $ref: string; }; verifier: { type: string; items: { type: string; }; }; issuanceDate: { $ref: string; }; expirationDate: { $ref: string; }; id: { type: string; }; }; required: string',"[","]","; description: string; }; W3CVerifiableCredential: { anyOf: { $ref: string; }","[","]","; description: string; }; CompactJWT: { type: string; description: string; }; VerifiablePresentation: { type: string; properties: { proof: { $ref: string; }; holder: { type: string; }; verifiableCredential: { type: string; items: { $ref: string; }; }; type: { anyOf: ({ type: string; items: { type: string; }; } ","|"," { type: string; items?: undefined; })","[","]",'; }; "@context": { $ref: string; }; verifier: { type: string; items: { type: string; }; }; issuanceDate: { type: string; }; expirationDate: { type: string; }; id: { type: string; }; }; required: string',"[","]","; description: string; }; IVerifyCredentialLDArgs: { type: string; properties: { credential: { $ref: string; description: string; }; fetchRemoteContexts: { type: string; description: string; }; }; required: string","[","]","; additionalProperties: { description: string; }; description: string; }; IVerifyPresentationLDArgs: { type: string; properties: { presentation: { $ref: string; description: string; }; challenge: { type: string; description: string; }; domain: { type: string; description: string; }; fetchRemoteContexts: { type: string; description: string; }; }; required: string","[","]","; additionalProperties: { description: string; }; description: string; }; }; methods: { createVerifiableCredentialLD: { description: string; arguments: { $ref: string; }; returnType: { $ref: string; }; }; createVerifiablePresentationLD: { description: string; arguments: { $ref: string; }; returnType: { $ref: string; }; }; verifyCredentialLD: { description: string; arguments: { $ref: string; }; returnType: { type: string; }; }; verifyPresentationLD: { description: string; arguments: { $ref: string; }; returnType: { type: string; }; }; }; }; }"),(0,a.kt)("td",{parentName:"tr",align:null})))),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Method"),(0,a.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/credential-ld.credentialissuerld.createverifiablecredentialld"},"createVerifiableCredentialLD(args, context)")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Creates a Verifiable Credential. The payload, signer and format are chosen based on the ",(0,a.kt)("code",null,"args")," parameter.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/credential-ld.credentialissuerld.createverifiablepresentationld"},"createVerifiablePresentationLD(args, context)")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Creates a Verifiable Presentation. The payload, signer and format are chosen based on the ",(0,a.kt)("code",null,"args")," parameter.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/credential-ld.credentialissuerld.verifycredentialld"},"verifyCredentialLD(args, context)")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Verifies a Verifiable Credential JWT or LDS Format.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/credential-ld.credentialissuerld.verifypresentationld"},"verifyPresentationLD(args, context)")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Verifies a Verifiable Presentation JWT or LDS Format.")))))}f.isMDXComponent=!0}}]);