"use strict";(self.webpackChunkgimly_site_docs=self.webpackChunkgimly_site_docs||[]).push([[24639],{3905:function(t,e,a){a.d(e,{Zo:function(){return p},kt:function(){return m}});var r=a(67294);function n(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function i(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,r)}return a}function l(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?i(Object(a),!0).forEach((function(e){n(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,r,n=function(t,e){if(null==t)return{};var a,r,n={},i=Object.keys(t);for(r=0;r<i.length;r++)a=i[r],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)a=i[r],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var s=r.createContext({}),d=function(t){var e=r.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):l(l({},e),t)),a},p=function(t){var e=d(t.components);return r.createElement(s.Provider,{value:e},t.children)},u="mdxType",c={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},k=r.forwardRef((function(t,e){var a=t.components,n=t.mdxType,i=t.originalType,s=t.parentName,p=o(t,["components","mdxType","originalType","parentName"]),u=d(a),k=n,m=u["".concat(s,".").concat(k)]||u[k]||c[k]||i;return a?r.createElement(m,l(l({ref:e},p),{},{components:a})):r.createElement(m,l({ref:e},p))}));function m(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var i=a.length,l=new Array(i);l[0]=k;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o[u]="string"==typeof t?t:n,l[1]=o;for(var d=2;d<i;d++)l[d]=a[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}k.displayName="MDXCreateElement"},66127:function(t,e,a){a.r(e),a.d(e,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return u}});var r=a(87462),n=a(63366),i=(a(67294),a(3905)),l=["components"],o={id:"utils",title:"utils package",hide_title:!0},s=void 0,d={unversionedId:"api/utils",id:"api/utils",title:"utils package",description:"utils package",source:"@site/docs/api/utils.md",sourceDirName:"api",slug:"/api/utils",permalink:"/docs/api/utils",draft:!1,tags:[],version:"current",frontMatter:{id:"utils",title:"utils package",hide_title:!0}},p={},u=[{value:"utils package",id:"utils-package",level:2},{value:"Functions",id:"functions",level:2},{value:"Variables",id:"variables",level:2},{value:"Type Aliases",id:"type-aliases",level:2}],c={toc:u},k="wrapper";function m(t){var e=t.components,a=(0,n.Z)(t,l);return(0,i.kt)(k,(0,r.Z)({},c,a,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"utils-package"},"utils package"),(0,i.kt)("p",null,"Contains helper methods for Gimly plugins."),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Function"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.asarray"},"asArray(arg)")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)"))," Ensures that a given input is an array. If the input is a single item, it is converted to an array with a single entry.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.base58tobytes"},"base58ToBytes(s)")),(0,i.kt)("td",{parentName:"tr",align:null},"Converts a base58 string to the Uint8Array it represents.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.base64tobytes"},"base64ToBytes(s)")),(0,i.kt)("td",{parentName:"tr",align:null},"Converts a base64url string to the Uint8Array it represents.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.bytestobase58"},"bytesToBase58(byteArray)")),(0,i.kt)("td",{parentName:"tr",align:null},"Converts a base58 string to the Uint8Array it represents.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.bytestobase64"},"bytesToBase64(b)")),(0,i.kt)("td",{parentName:"tr",align:null},"Encodes a Uint8Array to a base64 string representation with padding.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.bytestobase64url"},"bytesToBase64url(b)")),(0,i.kt)("td",{parentName:"tr",align:null},"Converts a Uint8Array to a base64url string")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.bytestohex"},"bytesToHex(byteArray, prefix)")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)"))," Converts a Uint8Array input to a hex string")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.bytestomultibase"},"bytesToMultibase(byteArray, type)")),(0,i.kt)("td",{parentName:"tr",align:null},"Converts a Uint8Array to a multibase string.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.compressidentifiersecp256k1keys"},"compressIdentifierSecp256k1Keys(identifier)")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)"))," Converts any Secp256k1 public keys of an ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/core-types.iidentifier"},"IIdentifier")," to their compressed form.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.computeentryhash"},"computeEntryHash(input)")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)"))," Computes a hash for a given credential or presentation. This hash is usable as an internal ID for database indexing")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.convertidentifierencryptionkeys"},"convertIdentifierEncryptionKeys(identifier)")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)"))," Converts any Ed25519 keys of an ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/core-types.iidentifier"},"IIdentifier")," to X25519 to be usable for encryption.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.decodebase64url"},"decodeBase64url(s)")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)"))," Decodes a base64url string to a utf8 string represented by the same bytes.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.decodecredentialtoobject"},"decodeCredentialToObject(input)")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)"))," Parses a ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/core-types.w3cverifiablecredential"},"W3CVerifiableCredential")," and converts it to a ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/core-types.verifiablecredential"},"VerifiableCredential")," so it is easier to use programmatically.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.decodejoseblob"},"decodeJoseBlob(blob)")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)"))," Decodes a base64url string representing stringified JSON to a JSON object.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.decodepresentationtoobject"},"decodePresentationToObject(input)")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)"))," Parses a ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/core-types.w3cverifiablepresentation"},"W3CVerifiablePresentation")," and converts it to a ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/core-types.verifiablepresentation"},"VerifiablePresentation")," so it is easier to use programmatically.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.dereferencedidkeys"},"dereferenceDidKeys(didDocument, section, context)")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("p",null,(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)"))," Dereferences keys from DID document and normalizes them for easy comparison."),(0,i.kt)("p",null,"When dereferencing keyAgreement keys, only Ed25519 and X25519 curves are supported. Other key types are omitted from the result and Ed25519 keys are converted to X25519"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.encodebase64url"},"encodeBase64url(s)")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)"))," Encodes the bytes of an input string to base64url")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.encodejoseblob"},"encodeJoseBlob(payload)")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)"))," Stringifies a JSON object and encodes the bytes of the resulting string to a base64url representation.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.extractissuer"},"extractIssuer(input)")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)"))," Decodes a credential or presentation and returns the issuer ID ",(0,i.kt)("code",null,"iss")," from a JWT or ",(0,i.kt)("code",null,"issuer"),"/",(0,i.kt)("code",null,"issuer.id")," from a VC or ",(0,i.kt)("code",null,"holder")," from a VP")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.extractpublickeyhex"},"extractPublicKeyHex(pk, convert)")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)"))," Converts the publicKey of a VerificationMethod to hex encoding (publicKeyHex)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.getchainidfordidethr"},"getChainIdForDidEthr(verificationMethod)")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)"))," Extracts the chain ID from a supporting legacy representations as well.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.getethereumaddress"},"getEthereumAddress(verificationMethod)")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)"))," Extracts an ethereum address from a supporting legacy representations.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.hextobytes"},"hexToBytes(hexString)")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)"))," Converts a hex string (with or without prefix) to a byte array (Uint8Array)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.isdefined"},"isDefined(arg)")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)"))," Checks if a variable is defined and not null. After this check, typescript sees the variable as defined.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.isiterable"},"isIterable(obj)")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)"))," Checks if an object is iterable (can be used for ",(0,i.kt)("code",null,"for..of"),")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.mapidentifierkeystodoc"},"mapIdentifierKeysToDoc(identifier, section, context)")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)"))," Maps the keys of a locally managed ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/core-types.iidentifier"},"IIdentifier")," to the corresponding entries from the DID document.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.multibasekeytobytes"},"multibaseKeyToBytes(s)")),(0,i.kt)("td",{parentName:"tr",align:null},"Converts a multibase string to the Uint8Array it represents.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.processentrytoarray"},"processEntryToArray(inputEntryOrArray, startWithEntry)")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)"))," Processes an entry or an array of entries into an array of entries. If a ",(0,i.kt)("code",null,"startWithEntry")," param is provided, it is set as the first item in the result array.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.resolvedidorthrow"},"resolveDidOrThrow(didUrl, context)")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)"))," Resolve a DID document or throw an error if the resolution fails.")))),(0,i.kt)("h2",{id:"variables"},"Variables"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Variable"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.mandatory_credential_context"},"MANDATORY_CREDENTIAL_CONTEXT")),(0,i.kt)("td",{parentName:"tr",align:null},"Every Verifiable Credential ",(0,i.kt)("code",null,"@context")," property must contain this.")))),(0,i.kt)("h2",{id:"type-aliases"},"Type Aliases"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Type Alias"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/utils.recordlike"},"RecordLike")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("p",null,(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)"))," A mapping of string to another type. Both Map and Record are accepted."),(0,i.kt)("p",null,"This API may change without a BREAKING CHANGE notice."))))))}m.isMDXComponent=!0}}]);