"use strict";(self.webpackChunkgimly_site_docs=self.webpackChunkgimly_site_docs||[]).push([[8821],{3905:function(n,t,e){e.d(t,{Zo:function(){return g},kt:function(){return f}});var r=e(67294);function i(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function s(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function o(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?s(Object(e),!0).forEach((function(t){i(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):s(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function a(n,t){if(null==n)return{};var e,r,i=function(n,t){if(null==n)return{};var e,r,i={},s=Object.keys(n);for(r=0;r<s.length;r++)e=s[r],t.indexOf(e)>=0||(i[e]=n[e]);return i}(n,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);for(r=0;r<s.length;r++)e=s[r],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(i[e]=n[e])}return i}var d=r.createContext({}),c=function(n){var t=r.useContext(d),e=t;return n&&(e="function"==typeof n?n(t):o(o({},t),n)),e},g=function(n){var t=c(n.components);return r.createElement(d.Provider,{value:t},n.children)},p="mdxType",l={inlineCode:"code",wrapper:function(n){var t=n.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(n,t){var e=n.components,i=n.mdxType,s=n.originalType,d=n.parentName,g=a(n,["components","mdxType","originalType","parentName"]),p=c(e),u=i,f=p["".concat(d,".").concat(u)]||p[u]||l[u]||s;return e?r.createElement(f,o(o({ref:t},g),{},{components:e})):r.createElement(f,o({ref:t},g))}));function f(n,t){var e=arguments,i=t&&t.mdxType;if("string"==typeof n||i){var s=e.length,o=new Array(s);o[0]=u;var a={};for(var d in t)hasOwnProperty.call(t,d)&&(a[d]=t[d]);a.originalType=n,a[p]="string"==typeof n?n:i,o[1]=a;for(var c=2;c<s;c++)o[c]=e[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,e)}u.displayName="MDXCreateElement"},81087:function(n,t,e){e.r(t),e.d(t,{assets:function(){return g},contentTitle:function(){return d},default:function(){return f},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return p}});var r=e(87462),i=e(63366),s=(e(67294),e(3905)),o=["components"],a={id:"credential-ld.lddefaultcontexts",title:"LdDefaultContexts variable",hide_title:!0},d=void 0,c={unversionedId:"api/credential-ld.lddefaultcontexts",id:"api/credential-ld.lddefaultcontexts",title:"LdDefaultContexts variable",description:"LdDefaultContexts variable",source:"@site/docs/api/credential-ld.lddefaultcontexts.md",sourceDirName:"api",slug:"/api/credential-ld.lddefaultcontexts",permalink:"/docs/api/credential-ld.lddefaultcontexts",draft:!1,editUrl:"https://github.com/uport-project/gimly-website/edit/main/docs/api/credential-ld.lddefaultcontexts.md",tags:[],version:"current",frontMatter:{id:"credential-ld.lddefaultcontexts",title:"LdDefaultContexts variable",hide_title:!0}},g={},p=[{value:"LdDefaultContexts variable",id:"lddefaultcontexts-variable",level:2}],l={toc:p},u="wrapper";function f(n){var t=n.components,e=(0,i.Z)(n,o);return(0,s.kt)(u,(0,r.Z)({},l,e,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"lddefaultcontexts-variable"},"LdDefaultContexts variable"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.")),(0,s.kt)("p",null,"Provides a hardcoded map of common Linked Data ",(0,s.kt)("inlineCode",{parentName:"p"},"@context")," definitions."),(0,s.kt)("p",null,"You can use this to bootstrap the ",(0,s.kt)("inlineCode",{parentName:"p"},"@context")," definitions used by ",(0,s.kt)("a",{parentName:"p",href:"/docs/api/credential-ld.credentialissuerld"},"CredentialIssuerLD")," with these common context definitions."),(0,s.kt)("p",null,"This API may change without a BREAKING CHANGE notice."),(0,s.kt)("b",null,"Signature:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"LdDefaultContexts: Map<\n  string,\n  {\n    '@context': {\n      '@version': number\n      '@protected': boolean\n      id: string\n      type: string\n      VerifiableCredential: {\n        '@id': string\n        '@context': {\n          '@version': number\n          '@protected': boolean\n          id: string\n          type: string\n          cred: string\n          sec: string\n          xsd: string\n          credentialSchema: {\n            '@id': string\n            '@type': string\n            '@context': {\n              '@version': number\n              '@protected': boolean\n              id: string\n              type: string\n              cred: string\n              JsonSchemaValidator2018: string\n            }\n          }\n          credentialStatus: {\n            '@id': string\n            '@type': string\n          }\n          credentialSubject: {\n            '@id': string\n            '@type': string\n          }\n          evidence: {\n            '@id': string\n            '@type': string\n          }\n          expirationDate: {\n            '@id': string\n            '@type': string\n          }\n          holder: {\n            '@id': string\n            '@type': string\n          }\n          issued: {\n            '@id': string\n            '@type': string\n          }\n          issuer: {\n            '@id': string\n            '@type': string\n          }\n          issuanceDate: {\n            '@id': string\n            '@type': string\n          }\n          proof: {\n            '@id': string\n            '@type': string\n            '@container': string\n          }\n          refreshService: {\n            '@id': string\n            '@type': string\n            '@context': {\n              '@version': number\n              '@protected': boolean\n              id: string\n              type: string\n              cred: string\n              ManualRefreshService2018: string\n            }\n          }\n          termsOfUse: {\n            '@id': string\n            '@type': string\n          }\n          validFrom: {\n            '@id': string\n            '@type': string\n          }\n          validUntil: {\n            '@id': string\n            '@type': string\n          }\n        }\n      }\n      VerifiablePresentation: {\n        '@id': string\n        '@context': {\n          '@version': number\n          '@protected': boolean\n          id: string\n          type: string\n          cred: string\n          sec: string\n          holder: {\n            '@id': string\n            '@type': string\n          }\n          proof: {\n            '@id': string\n            '@type': string\n            '@container': string\n          }\n          verifiableCredential: {\n            '@id': string\n            '@type': string\n            '@container': string\n          }\n        }\n      }\n      EcdsaSecp256k1Signature2019: {\n        '@id': string\n        '@context': {\n          '@version': number\n          '@protected': boolean\n          id: string\n          type: string\n          sec: string\n          xsd: string\n          challenge: string\n          created: {\n            '@id': string\n            '@type': string\n          }\n          domain: string\n          expires: {\n            '@id': string\n            '@type': string\n          }\n          jws: string\n          nonce: string\n          proofPurpose: {\n            '@id': string\n            '@type': string\n            '@context': {\n              '@version': number\n              '@protected': boolean\n              id: string\n              type: string\n              sec: string\n              assertionMethod: {\n                '@id': string\n                '@type': string\n                '@container': string\n              }\n              authentication: {\n                '@id': string\n                '@type': string\n                '@container': string\n              }\n            }\n          }\n          proofValue: string\n          verificationMethod: {\n            '@id': string\n            '@type': string\n          }\n        }\n      }\n      EcdsaSecp256r1Signature2019: {\n        '@id': string\n        '@context': {\n          '@version': number\n          '@protected': boolean\n          id: string\n          type: string\n          sec: string\n          xsd: string\n          challenge: string\n          created: {\n            '@id': string\n            '@type': string\n          }\n          domain: string\n          expires: {\n            '@id': string\n            '@type': string\n          }\n          jws: string\n          nonce: string\n          proofPurpose: {\n            '@id': string\n            '@type': string\n            '@context': {\n              '@version': number\n              '@protected': boolean\n              id: string\n              type: string\n              sec: string\n              assertionMethod: {\n                '@id': string\n                '@type': string\n                '@container': string\n              }\n              authentication: {\n                '@id': string\n                '@type': string\n                '@container': string\n              }\n            }\n          }\n          proofValue: string\n          verificationMethod: {\n            '@id': string\n            '@type': string\n          }\n        }\n      }\n      Ed25519Signature2018: {\n        '@id': string\n        '@context': {\n          '@version': number\n          '@protected': boolean\n          id: string\n          type: string\n          sec: string\n          xsd: string\n          challenge: string\n          created: {\n            '@id': string\n            '@type': string\n          }\n          domain: string\n          expires: {\n            '@id': string\n            '@type': string\n          }\n          jws: string\n          nonce: string\n          proofPurpose: {\n            '@id': string\n            '@type': string\n            '@context': {\n              '@version': number\n              '@protected': boolean\n              id: string\n              type: string\n              sec: string\n              assertionMethod: {\n                '@id': string\n                '@type': string\n                '@container': string\n              }\n              authentication: {\n                '@id': string\n                '@type': string\n                '@container': string\n              }\n            }\n          }\n          proofValue: string\n          verificationMethod: {\n            '@id': string\n            '@type': string\n          }\n        }\n      }\n      RsaSignature2018: {\n        '@id': string\n        '@context': {\n          '@version': number\n          '@protected': boolean\n          challenge: string\n          created: {\n            '@id': string\n            '@type': string\n          }\n          domain: string\n          expires: {\n            '@id': string\n            '@type': string\n          }\n          jws: string\n          nonce: string\n          proofPurpose: {\n            '@id': string\n            '@type': string\n            '@context': {\n              '@version': number\n              '@protected': boolean\n              id: string\n              type: string\n              sec: string\n              assertionMethod: {\n                '@id': string\n                '@type': string\n                '@container': string\n              }\n              authentication: {\n                '@id': string\n                '@type': string\n                '@container': string\n              }\n            }\n          }\n          proofValue: string\n          verificationMethod: {\n            '@id': string\n            '@type': string\n          }\n        }\n      }\n      proof: {\n        '@id': string\n        '@type': string\n        '@container': string\n      }\n    }\n  }\n>\n")))}f.isMDXComponent=!0}}]);