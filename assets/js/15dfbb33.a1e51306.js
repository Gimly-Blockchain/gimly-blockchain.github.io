"use strict";(self.webpackChunkgimly_site_docs=self.webpackChunkgimly_site_docs||[]).push([[37908],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),s=l(n),f=i,m=s["".concat(p,".").concat(f)]||s[f]||u[f]||a;return n?r.createElement(m,o(o({ref:t},d),{},{components:n})):r.createElement(m,o({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=f;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c[s]="string"==typeof e?e:i,o[1]=c;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8730:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return s}});var r=n(87462),i=n(63366),a=(n(67294),n(3905)),o=["components"],c={id:"utils.mapidentifierkeystodoc",title:"mapIdentifierKeysToDoc() function",hide_title:!0},p=void 0,l={unversionedId:"api/utils.mapidentifierkeystodoc",id:"api/utils.mapidentifierkeystodoc",title:"mapIdentifierKeysToDoc() function",description:"mapIdentifierKeysToDoc() function",source:"@site/docs/api/utils.mapidentifierkeystodoc.md",sourceDirName:"api",slug:"/api/utils.mapidentifierkeystodoc",permalink:"/docs/api/utils.mapidentifierkeystodoc",draft:!1,tags:[],version:"current",frontMatter:{id:"utils.mapidentifierkeystodoc",title:"mapIdentifierKeysToDoc() function",hide_title:!0}},d={},s=[{value:"mapIdentifierKeysToDoc() function",id:"mapidentifierkeystodoc-function",level:2},{value:"Parameters",id:"parameters",level:2}],u={toc:s},f="wrapper";function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)(f,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"mapidentifierkeystodoc-function"},"mapIdentifierKeysToDoc() function"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.")),(0,a.kt)("p",null,"Maps the keys of a locally managed ",(0,a.kt)("a",{parentName:"p",href:"/docs/api/core-types.iidentifier"},"IIdentifier")," to the corresponding entries from the DID document."),(0,a.kt)("b",null,"Signature:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export declare function mapIdentifierKeysToDoc(\n  identifier: IIdentifier,\n  section: DIDDocumentSection | undefined,\n  context: IAgentContext<IResolver>,\n): Promise<_ExtendedIKey[]>\n")),(0,a.kt)("h2",{id:"parameters"},"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"identifier"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/core-types.iidentifier"},"IIdentifier")),(0,a.kt)("td",{parentName:"tr",align:null},"the identifier to be mapped")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"section"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/core-types.diddocumentsection"},"DIDDocumentSection")," ","|"," undefined"),(0,a.kt)("td",{parentName:"tr",align:null},"the section of the DID document to be mapped (see ",(0,a.kt)("a",{parentName:"td",href:"https://www.w3.org/TR/did-core/#verification-relationships"},"verification relationships"),"), but can also be ",(0,a.kt)("code",null,"verificationMethod")," to map all the keys.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"context"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/core-types.iagentcontext"},"IAgentContext"),"<",(0,a.kt)("a",{parentName:"td",href:"/docs/api/core-types.iresolver"},"IResolver"),">"),(0,a.kt)("td",{parentName:"tr",align:null},"the gimly agent context, which must contain a ",(0,a.kt)("a",{parentName:"td",href:"/docs/api/core-types.iresolver"},"IResolver")," implementation that can resolve the DID document of the identifier.")))),(0,a.kt)("b",null,"Returns:"),(0,a.kt)("p",null,"Promise","<","_","ExtendedIKey","[","]",">"),(0,a.kt)("p",null,"an array of mapped keys. The corresponding verification method is added to the ",(0,a.kt)("inlineCode",{parentName:"p"},"meta.verificationMethod")," property of the key."),(0,a.kt)("p",null,"This API may change without a BREAKING CHANGE notice."))}m.isMDXComponent=!0}}]);