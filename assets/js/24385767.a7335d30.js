"use strict";(self.webpackChunkgimly_site_docs=self.webpackChunkgimly_site_docs||[]).push([[86395],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(r),f=i,m=u["".concat(s,".").concat(f)]||u[f]||d[f]||a;return r?n.createElement(m,o(o({ref:t},p),{},{components:r})):n.createElement(m,o({ref:t},p))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:i,o[1]=c;for(var l=2;l<a;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},85281:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return u}});var n=r(87462),i=r(63366),a=(r(67294),r(3905)),o=["components"],c={id:"core-types.icredentialstatusverifier",title:"ICredentialStatusVerifier interface",hide_title:!0},s=void 0,l={unversionedId:"api/core-types.icredentialstatusverifier",id:"api/core-types.icredentialstatusverifier",title:"ICredentialStatusVerifier interface",description:"ICredentialStatusVerifier interface",source:"@site/docs/api/core-types.icredentialstatusverifier.md",sourceDirName:"api",slug:"/api/core-types.icredentialstatusverifier",permalink:"/docs/api/core-types.icredentialstatusverifier",draft:!1,editUrl:"https://github.com/uport-project/gimly-website/edit/main/docs/api/core-types.icredentialstatusverifier.md",tags:[],version:"current",frontMatter:{id:"core-types.icredentialstatusverifier",title:"ICredentialStatusVerifier interface",hide_title:!0}},p={},u=[{value:"ICredentialStatusVerifier interface",id:"icredentialstatusverifier-interface",level:2},{value:"Methods",id:"methods",level:2}],d={toc:u},f="wrapper";function m(e){var t=e.components,r=(0,i.Z)(e,o);return(0,a.kt)(f,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"icredentialstatusverifier-interface"},"ICredentialStatusVerifier interface"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.")),(0,a.kt)("p",null,"This interface defines a plugin that can check the ",(0,a.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/vc-data-model/#status"},"status")," of a ",(0,a.kt)("a",{parentName:"p",href:"/docs/api/core-types.verifiablecredential"},"Verifiable Credential"),"."),(0,a.kt)("p",null,"This is used for the discovery of information about the current status of a verifiable credential, such as whether it is suspended or revoked. The precise contents of the credential status information is determined by the specific ",(0,a.kt)("inlineCode",{parentName:"p"},"credentialStatus")," type definition, and varies depending on factors such as whether it is simple to implement or if it is privacy-enhancing."),(0,a.kt)("p",null,"The result provided by implementations of this plugin depend on whether the implementation of the StatusMethod is available."),(0,a.kt)("b",null,"Signature:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface ICredentialStatusVerifier extends IPluginMethodMap\n")),(0,a.kt)("b",null,"Extends:")," [IPluginMethodMap](/docs/api/core-types.ipluginmethodmap)",(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Method"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/core-types.icredentialstatusverifier.checkcredentialstatus"},"checkCredentialStatus(args, context)")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("b",null,(0,a.kt)("i",null,"(BETA)"))," Checks the status of a ",(0,a.kt)("a",{parentName:"td",href:"/docs/api/core-types.verifiablecredential"},"Verifiable Credential"),".")))))}m.isMDXComponent=!0}}]);