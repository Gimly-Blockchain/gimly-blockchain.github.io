"use strict";(self.webpackChunkgimly_site_docs=self.webpackChunkgimly_site_docs||[]).push([[64415],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return g}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},l="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=m(e,["components","mdxType","originalType","parentName"]),l=d(n),u=a,g=l["".concat(s,".").concat(u)]||l[u]||p[u]||o;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var m={};for(var s in t)hasOwnProperty.call(t,s)&&(m[s]=t[s]);m.originalType=e,m[l]="string"==typeof e?e:a,i[1]=m;for(var d=2;d<o;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},19015:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return m},metadata:function(){return d},toc:function(){return l}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],m={id:"did-comm.ididcomm.senddidcommmessage",title:"IDIDComm.sendDIDCommMessage() method",hide_title:!0},s=void 0,d={unversionedId:"api/did-comm.ididcomm.senddidcommmessage",id:"api/did-comm.ididcomm.senddidcommmessage",title:"IDIDComm.sendDIDCommMessage() method",description:"IDIDComm.sendDIDCommMessage() method",source:"@site/docs/api/did-comm.ididcomm.senddidcommmessage.md",sourceDirName:"api",slug:"/api/did-comm.ididcomm.senddidcommmessage",permalink:"/docs/api/did-comm.ididcomm.senddidcommmessage",draft:!1,tags:[],version:"current",frontMatter:{id:"did-comm.ididcomm.senddidcommmessage",title:"IDIDComm.sendDIDCommMessage() method",hide_title:!0}},c={},l=[{value:"IDIDComm.sendDIDCommMessage() method",id:"ididcommsenddidcommmessage-method",level:2},{value:"Parameters",id:"parameters",level:2}],p={toc:l},u="wrapper";function g(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"ididcommsenddidcommmessage-method"},"IDIDComm.sendDIDCommMessage() method"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.")),(0,o.kt)("p",null,"Sends the given message to the recipient. If a return transport is provided it will be checked whether the parent thread allows reusing the route. You cannot reuse the transport if the message was forwarded from a DIDComm mediator."),(0,o.kt)("p",null,"Emits an eventType 'DIDCommV2Message-sent' that contains the message id of packed DIDComm message ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/did-comm.ipackeddidcommmessage"},"IPackedDIDCommMessage")," after the message was sent."),(0,o.kt)("b",null,"Signature:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"sendDIDCommMessage(args: ISendDIDCommMessageArgs, context: IAgentContext<IResolver>): Promise<string>;\n")),(0,o.kt)("h2",{id:"parameters"},"Parameters"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"args"),(0,o.kt)("td",{parentName:"tr",align:null},"ISendDIDCommMessageArgs"),(0,o.kt)("td",{parentName:"tr",align:null},"An object containing the message, recipient information and optional information about the transport that should be used.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"context"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/api/core-types.iagentcontext"},"IAgentContext"),"<",(0,o.kt)("a",{parentName:"td",href:"/docs/api/core-types.iresolver"},"IResolver"),">"),(0,o.kt)("td",{parentName:"tr",align:null},"This method requires an agent that also has ",(0,o.kt)("a",{parentName:"td",href:"/docs/api/core-types.iresolver"},"IResolver")," plugins in use. When calling this method, the ",(0,o.kt)("code",null,"context")," is supplied automatically by the framework.")))),(0,o.kt)("b",null,"Returns:"),(0,o.kt)("p",null,"Promise","<","string",">"),(0,o.kt)("p",null,"The transport id that was used to send the message. It throws an error in case something went wrong."),(0,o.kt)("p",null,"This API may change without a BREAKING CHANGE notice."))}g.isMDXComponent=!0}}]);