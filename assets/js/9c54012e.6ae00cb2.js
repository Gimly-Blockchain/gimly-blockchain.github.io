"use strict";(self.webpackChunkgimly_site_docs=self.webpackChunkgimly_site_docs||[]).push([[49108],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return g}});var n=r(67294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),l=p(r),f=s,g=l["".concat(c,".").concat(f)]||l[f]||d[f]||a;return r?n.createElement(g,o(o({ref:t},u),{},{components:r})):n.createElement(g,o({ref:t},u))}));function g(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=r.length,o=new Array(a);o[0]=f;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[l]="string"==typeof e?e:s,o[1]=i;for(var p=2;p<a;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},79165:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return l}});var n=r(87462),s=r(63366),a=(r(67294),r(3905)),o=["components"],i={id:"core-types.findmessagesargs",title:"FindMessagesArgs type",hide_title:!0},c=void 0,p={unversionedId:"api/core-types.findmessagesargs",id:"api/core-types.findmessagesargs",title:"FindMessagesArgs type",description:"FindMessagesArgs type",source:"@site/docs/api/core-types.findmessagesargs.md",sourceDirName:"api",slug:"/api/core-types.findmessagesargs",permalink:"/docs/api/core-types.findmessagesargs",draft:!1,editUrl:"https://github.com/uport-project/gimly-website/edit/main/docs/api/core-types.findmessagesargs.md",tags:[],version:"current",frontMatter:{id:"core-types.findmessagesargs",title:"FindMessagesArgs type",hide_title:!0}},u={},l=[{value:"FindMessagesArgs type",id:"findmessagesargs-type",level:2}],d={toc:l},f="wrapper";function g(e){var t=e.components,r=(0,s.Z)(e,o);return(0,a.kt)(f,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"findmessagesargs-type"},"FindMessagesArgs type"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.")),(0,a.kt)("p",null,"The filter that can be used to find ",(0,a.kt)("a",{parentName:"p",href:"/docs/api/core-types.imessage"},"IMessage"),"s in the data store. See ",(0,a.kt)("a",{parentName:"p",href:"/docs/api/core-types.idatastoreorm.datastoreormgetmessages"},"IDataStoreORM.dataStoreORMGetMessages()")),(0,a.kt)("p",null,"This API may change without a BREAKING CHANGE notice."),(0,a.kt)("b",null,"Signature:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export type FindMessagesArgs = FindArgs<TMessageColumns>\n")),(0,a.kt)("b",null,"References:")," [FindArgs](/docs/api/core-types.findargs), [TMessageColumns](/docs/api/core-types.tmessagecolumns)")}g.isMDXComponent=!0}}]);