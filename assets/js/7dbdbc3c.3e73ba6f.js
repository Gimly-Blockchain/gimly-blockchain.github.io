"use strict";(self.webpackChunkgimly_site_docs=self.webpackChunkgimly_site_docs||[]).push([[29410],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return y}});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),s=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=s(e.components);return r.createElement(o.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),d=s(a),k=n,y=d["".concat(o,".").concat(k)]||d[k]||c[k]||i;return a?r.createElement(y,l(l({ref:t},m),{},{components:a})):r.createElement(y,l({ref:t},m))}));function y(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=k;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[d]="string"==typeof e?e:n,l[1]=p;for(var s=2;s<i;s++)l[s]=a[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}k.displayName="MDXCreateElement"},23602:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return o},default:function(){return y},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return d}});var r=a(87462),n=a(63366),i=(a(67294),a(3905)),l=["components"],p={id:"key-manager",title:"key-manager package",hide_title:!0},o=void 0,s={unversionedId:"api/key-manager",id:"api/key-manager",title:"key-manager package",description:"key-manager package",source:"@site/docs/api/key-manager.md",sourceDirName:"api",slug:"/api/key-manager",permalink:"/docs/api/key-manager",draft:!1,editUrl:"https://github.com/uport-project/gimly-website/edit/main/docs/api/key-manager.md",tags:[],version:"current",frontMatter:{id:"key-manager",title:"key-manager package",hide_title:!0}},m={},d=[{value:"key-manager package",id:"key-manager-package",level:2},{value:"Classes",id:"classes",level:2},{value:"Interfaces",id:"interfaces",level:2},{value:"Type Aliases",id:"type-aliases",level:2}],c={toc:d},k="wrapper";function y(e){var t=e.components,a=(0,n.Z)(e,l);return(0,i.kt)(k,(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"key-manager-package"},"key-manager package"),(0,i.kt)("p",null,"Provides a ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/key-manager.keymanager"},"plugin")," for the ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/core.agent"},"Agent")," that implements ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/core-types.ikeymanager"},"IKeyManager")," interface"),(0,i.kt)("h2",{id:"classes"},"Classes"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Class"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.abstractkeymanagementsystem"},"AbstractKeyManagementSystem")),(0,i.kt)("td",{parentName:"tr",align:null},"This base abstract class should be extended to provide cryptographic functions to other Gimly plugins.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.abstractkeystore"},"AbstractKeyStore")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("p",null,"This base abstract class should be extended to provide platform specific implementations that are usable by ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.keymanager"},"KeyManager"),"."),(0,i.kt)("p",null,"Implementations of this class are used to store mappings between key IDs and their respective ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.abstractkeymanagementsystem"},"AbstractKeyManagementSystem")," implementations."))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.abstractprivatekeystore"},"AbstractPrivateKeyStore")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("p",null,"This base abstract class should be extended to provide platform specific implementations that are usable by ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/kms-local.keymanagementsystem"},"kms-local"),"."),(0,i.kt)("p",null,"Implementations of this class are used to store mappings between key aliases and key material."))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.abstractsecretbox"},"AbstractSecretBox")),(0,i.kt)("td",{parentName:"tr",align:null},"This simple abstract class can be extended by different implementations to provide encryption at rest for some implementations of ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.abstractprivatekeystore"},"AbstractPrivateKeyStore"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.keymanager"},"KeyManager")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("p",null,"Agent plugin that implements ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/core-types.ikeymanager"},"IKeyManager")," methods."),(0,i.kt)("p",null,"This plugin orchestrates various implementations of ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.abstractkeymanagementsystem"},"AbstractKeyManagementSystem"),", using a KeyStore to remember the link between a key reference, its metadata, and the respective key management system that provides the actual cryptographic capabilities."),(0,i.kt)("p",null,"The methods of this plugin are used automatically by other plugins, such as ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/did-manager.didmanager"},"DIDManager"),", ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/credential-w3c.credentialplugin"},"CredentialPlugin"),", or ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/did-comm.didcomm"},"DIDComm")," to perform their required cryptographic operations using the managed keys."))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.memorykeystore"},"MemoryKeyStore")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("p",null,"An implementation of ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.abstractkeystore"},"AbstractKeyStore")," that holds everything in memory."),(0,i.kt)("p",null,"This is usable by ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.keymanager"},"KeyManager")," to hold the key metadata and relationship to the KMS implementation."))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.memoryprivatekeystore"},"MemoryPrivateKeyStore")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("p",null,"An implementation of ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.abstractprivatekeystore"},"AbstractPrivateKeyStore")," that holds everything in memory."),(0,i.kt)("p",null,"This is usable by ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/kms-local.keymanagementsystem"},"KeyManagementSystem")," to hold the private key data."))))),(0,i.kt)("h2",{id:"interfaces"},"Interfaces"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Interface"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.managedprivatekey"},"ManagedPrivateKey")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("p",null,"Represents a private key."),(0,i.kt)("p",null,"The ",(0,i.kt)("code",null,"alias")," is used to refer to the key material which is stored as the hex encoding of the raw byte array (",(0,i.kt)("code",null,"privateKeyHex"),")."),(0,i.kt)("p",null,"The ",(0,i.kt)("code",null,"type")," refers to the type of key that is represented."))))),(0,i.kt)("h2",{id:"type-aliases"},"Type Aliases"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Type Alias"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.eip712payload"},"Eip712Payload")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)"))," The payload that is sent to be signed according to EIP712")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.importableprivatekey"},"ImportablePrivateKey")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("p",null,"Represents private key data that can be imported. This is a subset of ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.managedprivatekey"},"ManagedPrivateKey"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("code",null,"alias")," of the resulting ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.managedprivatekey"},"ManagedPrivateKey")," can be generated automatically if none is provided."))))))}y.isMDXComponent=!0}}]);