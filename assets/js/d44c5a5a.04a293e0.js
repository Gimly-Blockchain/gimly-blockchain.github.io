"use strict";(self.webpackChunkgimly_site_docs=self.webpackChunkgimly_site_docs||[]).push([[98674],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return g}});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=a.createContext({}),c=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return a.createElement(d.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(n),p=o,g=u["".concat(d,".").concat(p)]||u[p]||m[p]||r;return n?a.createElement(g,i(i({ref:t},s),{},{components:n})):a.createElement(g,i({ref:t},s))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=p;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},55370:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return d},default:function(){return g},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var a=n(87462),o=n(63366),r=(n(67294),n(3905)),i=["components"],l={id:"gimly_react",title:"Gimly React Plugin"},d=void 0,c={unversionedId:"mobile_tools/gimly_react",id:"mobile_tools/gimly_react",title:"Gimly React Plugin",description:"Gimly React makes it easy to interact with multiple agents in React Applications.",source:"@site/docs/mobile_tools/gimly_react.md",sourceDirName:"mobile_tools",slug:"/mobile_tools/gimly_react",permalink:"/docs/mobile_tools/gimly_react",draft:!1,tags:[],version:"current",frontMatter:{id:"gimly_react",title:"Gimly React Plugin"},sidebar:"docs",previous:{title:"Gimly Flutter Plugin",permalink:"/docs/mobile_tools/gimly_flutter"},next:{title:"REST API Specification",permalink:"/docs/public_api/rest_api_specification"}},s={},u=[{value:"Motivation",id:"motivation",level:2},{value:"Install and set up",id:"install-and-set-up",level:2},{value:"Create local agent",id:"create-local-agent",level:2},{value:"<code>useGimly hook</code>",id:"usegimly-hook",level:2},{value:"API",id:"api",level:2},{value:"<code>agent</code>",id:"agent",level:3},{value:"<code>agents</code>",id:"agents",level:3},{value:"<code>activeAgentId</code>",id:"activeagentid",level:3},{value:"<code>setActiveAgentId</code>",id:"setactiveagentid",level:3},{value:"<code>addAgent</code>",id:"addagent",level:3},{value:"<code>removeAgent</code>",id:"removeagent",level:3},{value:"<code>addAgentConfig</code>",id:"addagentconfig",level:3},{value:"<code>updateAgentConfig</code>",id:"updateagentconfig",level:3},{value:"<code>getAgentConfig</code>",id:"getagentconfig",level:3},{value:"<code>getAgent</code>",id:"getagent",level:3}],m={toc:u},p="wrapper";function g(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)(p,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Gimly React makes it easy to interact with multiple agents in React Applications."),(0,r.kt)("h2",{id:"motivation"},"Motivation"),(0,r.kt)("p",null,"When using gimly in your front end React apps you may need to manage the state of multiple remote and local agents.\nGimly React makes it easy to manage agents without needing to write or maintain boilerplate code. It also enables\nmaking new features available to front-end stacks without developers needing to implement them manually."),(0,r.kt)("p",null,"When you add an agent configuration it is persisted to local storage. A randomly generated ID is assigned to each agent."),(0,r.kt)("h2",{id:"install-and-set-up"},"Install and set up"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @gimly-community/gimly-react\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"NOTE:"))," Gimly React depends on the ",(0,r.kt)("inlineCode",{parentName:"p"},"@next")," versions of ",(0,r.kt)("inlineCode",{parentName:"p"},"@gimly")),(0,r.kt)("p",null,"Installation includes ",(0,r.kt)("inlineCode",{parentName:"p"},"@gimly/core@next")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"@gimly/remote-client@next"),". You will ",(0,r.kt)("strong",{parentName:"p"},"NOT")," need to add\nadditional ",(0,r.kt)("inlineCode",{parentName:"p"},"@gimly")," dependencies to your app if you are just working with remote agents."),(0,r.kt)("p",null,"The following sippet is a simplified extract from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gimlylabs/agent-explorer"},"Gimly Agent Explorer"),"\nthat uses ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/tannerlinsley/react-query"},"React Query")," ontop of ",(0,r.kt)("inlineCode",{parentName:"p"},"Gimly React")," to manage the data layer\nincluding caching and global data syncing."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react'\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport { GimlyProvider } from '@gimly-community/gimly-react'\nimport { QueryClientProvider, QueryClient } from 'react-query'\nimport App from '../App'\n\nconst queryClient = new QueryClient()\n\nexport default = () => (\n  <QueryClientProvider client={queryClient}>\n    <GimlyProvider>\n      <BrowserRouter>\n        <Route component={App} />\n      </BrowserRouter>\n    </GimlyProvider>\n  </QueryClientProvider>\n)\n")),(0,r.kt)("h2",{id:"create-local-agent"},"Create local agent"),(0,r.kt)("p",null,"Create an agent in your app and export it. You will need to install additional dependencies"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @gimly/did-resolver@next ethr-did-resolver did-resolver web-did-resolver\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { createAgent, IResolver } from '@gimly/core'\n\nimport { DIDResolverPlugin } from '@gimly/did-resolver'\nimport { Resolver } from 'did-resolver'\nimport { getResolver as ethrDidResolver } from 'ethr-did-resolver'\nimport { getResolver as webDidResolver } from 'web-did-resolver'\n\n// You will need to get a project ID from infura https://www.infura.io\nconst INFURA_PROJECT_ID = '<your PROJECT_ID here>'\n\nexport const agent = createAgent<IResolver>({\n  plugins: [\n    new DIDResolverPlugin({\n      resolver: new Resolver({\n        ...ethrDidResolver({ infuraProjectId: INFURA_PROJECT_ID }),\n        ...webDidResolver(),\n      }),\n    }),\n  ],\n})\n")),(0,r.kt)("p",null,"In the provider setup above, add the following to bootstrap the local agent. You can also call ",(0,r.kt)("a",{parentName:"p",href:"#addagent"},"addAgent")," to\nadd while your application is running."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import {agent} from '../gimly'\n\n<GimlyProvider agent={[agent]}>...<GimlyProvider>\n")),(0,r.kt)("h2",{id:"usegimly-hook"},(0,r.kt)("inlineCode",{parentName:"h2"},"useGimly hook")),(0,r.kt)("p",null,"The primary hook that provides the following API to your app. The below syntax uses React Query to fetch the data and\nuses the cache key of ",(0,r.kt)("inlineCode",{parentName:"p"},"resolutionResult + agentID")," to identify the data to your app."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useGimly } from '@gimly-community/gimly-react'\nimport { useQuery } from 'react-query'\n\nexport default = () => {\n    const { agent } = useGimly<IResolver>()\n    const { data } = useQuery(\n        ['resolutionResult', { agentId: agent?.context.id }],\n        () => agent?.resolveDid({ didUrl: 'did:web:community.gimly.io' })())\n\n    return (\n        <div>\n            {\n                data?.didDocument?.verificationMethod.map((key) => (\n                    <div>{JSON.stringify(key)}</div>\n                )\n            }\n        <div>\n    )\n}\n")),(0,r.kt)("p",null,"If you are not using React Query you can just call ",(0,r.kt)("inlineCode",{parentName:"p"},"agent?.resolveDid()")," and manage the data\nlike any async data source."),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("h3",{id:"agent"},(0,r.kt)("inlineCode",{parentName:"h3"},"agent")),(0,r.kt)("p",null,"The current active agent object. Call agent methods as normal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"agent[METHOD]\n")),(0,r.kt)("h3",{id:"agents"},(0,r.kt)("inlineCode",{parentName:"h3"},"agents")),(0,r.kt)("p",null,"A list of all configured agents."),(0,r.kt)("h3",{id:"activeagentid"},(0,r.kt)("inlineCode",{parentName:"h3"},"activeAgentId")),(0,r.kt)("p",null,"The ID of the currently active agent."),(0,r.kt)("h3",{id:"setactiveagentid"},(0,r.kt)("inlineCode",{parentName:"h3"},"setActiveAgentId")),(0,r.kt)("p",null,"Set the current active agent by ID"),(0,r.kt)("h3",{id:"addagent"},(0,r.kt)("inlineCode",{parentName:"h3"},"addAgent")),(0,r.kt)("p",null,"Add a local agent. Create a local agent as per example in ",(0,r.kt)("inlineCode",{parentName:"p"},"Create local agent")," section."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { agent } from '../gimly'\nimport { useGimly } from '@gimly-community/gimly-react'\n\n// Inside a function component\n\nconst { addAgent } = useGimly()\n\nconst addLocalAgent = () => {\n  addAgent(agent)\n}\n")),(0,r.kt)("h3",{id:"removeagent"},(0,r.kt)("inlineCode",{parentName:"h3"},"removeAgent")),(0,r.kt)("p",null,"Remove an agent by ID."),(0,r.kt)("h3",{id:"addagentconfig"},(0,r.kt)("inlineCode",{parentName:"h3"},"addAgentConfig")),(0,r.kt)("p",null,"Add a remote agent configuration."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useGimly } from '@gimly-community/gimly-react'\n\n// Inside a function component\nconst { addAgentConfig } = useGimly()\n\nconst newAgentConfig = () => {\n  addAgentConfig({\n    context: { name: 'Agent Name', schema: schemaUrl },\n    remoteAgents: [\n      {\n        url: agentUrl,\n        enabledMethods: Object.keys(schema['x-methods']),\n        token: apiKey,\n      },\n    ],\n  })\n}\n")),(0,r.kt)("h3",{id:"updateagentconfig"},(0,r.kt)("inlineCode",{parentName:"h3"},"updateAgentConfig")),(0,r.kt)("p",null,"Update the configuration of an agent."),(0,r.kt)("h3",{id:"getagentconfig"},(0,r.kt)("inlineCode",{parentName:"h3"},"getAgentConfig")),(0,r.kt)("p",null,"Get the current configuration for an agent."),(0,r.kt)("h3",{id:"getagent"},(0,r.kt)("inlineCode",{parentName:"h3"},"getAgent")),(0,r.kt)("p",null,"Get an agent by ID."))}g.isMDXComponent=!0}}]);