"use strict";(self.webpackChunkgimly_site_docs=self.webpackChunkgimly_site_docs||[]).push([[56817],{3905:function(e,t,r){r.d(t,{Zo:function(){return o},kt:function(){return y}});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function d(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=n.createContext({}),g=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},o=function(e){var t=g(e.components);return n.createElement(p.Provider,{value:t},e.children)},l="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,o=d(e,["components","mdxType","originalType","parentName"]),l=g(r),c=i,y=l["".concat(p,".").concat(c)]||l[c]||m[c]||a;return r?n.createElement(y,s(s({ref:t},o),{},{components:r})):n.createElement(y,s({ref:t},o))}));function y(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,s=new Array(a);s[0]=c;var d={};for(var p in t)hasOwnProperty.call(t,p)&&(d[p]=t[p]);d.originalType=e,d[l]="string"==typeof e?e:i,s[1]=d;for(var g=2;g<a;g++)s[g]=r[g];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},50005:function(e,t,r){r.r(t),r.d(t,{assets:function(){return o},contentTitle:function(){return p},default:function(){return y},frontMatter:function(){return d},metadata:function(){return g},toc:function(){return l}});var n=r(87462),i=r(63366),a=(r(67294),r(3905)),s=["components"],d={id:"did-manager.didmanager",title:"DIDManager class",hide_title:!0},p=void 0,g={unversionedId:"api/did-manager.didmanager",id:"api/did-manager.didmanager",title:"DIDManager class",description:"DIDManager class",source:"@site/docs/api/did-manager.didmanager.md",sourceDirName:"api",slug:"/api/did-manager.didmanager",permalink:"/docs/api/did-manager.didmanager",draft:!1,editUrl:"https://github.com/uport-project/gimly-website/edit/main/docs/api/did-manager.didmanager.md",tags:[],version:"current",frontMatter:{id:"did-manager.didmanager",title:"DIDManager class",hide_title:!0}},o={},l=[{value:"DIDManager class",id:"didmanager-class",level:2},{value:"Constructors",id:"constructors",level:2},{value:"Properties",id:"properties",level:2},{value:"Methods",id:"methods",level:2}],m={toc:l},c="wrapper";function y(e){var t=e.components,r=(0,i.Z)(e,s);return(0,a.kt)(c,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"didmanager-class"},"DIDManager class"),(0,a.kt)("p",null,"Agent plugin that implements ",(0,a.kt)("a",{parentName:"p",href:"/docs/api/core-types.ididmanager"},"IDIDManager")," interface"),(0,a.kt)("b",null,"Signature:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export declare class DIDManager implements IAgentPlugin\n")),(0,a.kt)("b",null,"Implements:")," [IAgentPlugin](/docs/api/core-types.iagentplugin)",(0,a.kt)("h2",{id:"constructors"},"Constructors"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Constructor"),(0,a.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/did-manager.didmanager._constructor_"},"(constructor)(options)")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Constructs a new instance of the ",(0,a.kt)("code",null,"DIDManager")," class")))),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/did-manager.didmanager.methods"},"methods")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"readonly")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/core-types.ididmanager"},"IDIDManager")),(0,a.kt)("td",{parentName:"tr",align:null},"Plugin methods")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/did-manager.didmanager.schema"},"schema")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"readonly")),(0,a.kt)("td",{parentName:"tr",align:null},"{ components: { schemas: { IDIDManagerAddKeyArgs: { type: string; properties: { did: { type: string; description: string; }; key: { $ref: string; description: string; }; options: { type: string; description: string; }; }; required: string","[","]","; description: string; }; IKey: { type: string; properties: { kid: { type: string; description: string; }; kms: { type: string; description: string; }; type: { $ref: string; description: string; }; publicKeyHex: { type: string; description: string; }; privateKeyHex: { type: string; description: string; }; meta: { anyOf: ({ $ref: string; type?: undefined; } ","|"," { type: string; $ref?: undefined; })","[","]","; description: string; }; }; required: string","[","]","; description: string; }; TKeyType: { type: string; enum: string","[","]","; description: string; }; KeyMetadata: { type: string; properties: { algorithms: { type: string; items: { type: string; }; }; }; description: string; }; IDIDManagerAddServiceArgs: { type: string; properties: { did: { type: string; description: string; }; service: { $ref: string; description: string; }; options: { type: string; description: string; }; }; required: string","[","]","; description: string; }; IService: { type: string; properties: { id: { type: string; description: string; }; type: { type: string; description: string; }; serviceEndpoint: { anyOf: ({ $ref: string; type?: undefined; items?: undefined; } ","|"," { type: string; items: { $ref: string; }; $ref?: undefined; })","[","]","; description: string; }; description: { type: string; description: string; }; }; required: string","[","]","; description: string; }; IServiceEndpoint: { anyOf: { type: string; }","[","]","; description: string; }; IDIDManagerCreateArgs: { type: string; properties: { alias: { type: string; description: string; }; provider: { type: string; description: string; }; kms: { type: string; description: string; }; options: { type: string; description: string; }; }; description: string; }; IIdentifier: { type: string; properties: { did: { type: string; description: string; }; alias: { type: string; description: string; }; provider: { type: string; description: string; }; controllerKeyId: { type: string; description: string; }; keys: { type: string; items: { $ref: string; }; description: string; }; services: { type: string; items: { $ref: string; }; description: string; }; }; required: string","[","]","; description: string; }; IDIDManagerDeleteArgs: { type: string; properties: { did: { type: string; description: string; }; }; required: string","[","]","; description: string; }; IDIDManagerFindArgs: { type: string; properties: { alias: { type: string; description: string; }; provider: { type: string; description: string; }; }; description: string; }; IDIDManagerGetArgs: { type: string; properties: { did: { type: string; description: string; }; }; required: string","[","]","; description: string; }; IDIDManagerGetByAliasArgs: { type: string; properties: { alias: { type: string; description: string; }; provider: { type: string; description: string; }; }; required: string","[","]","; description: string; }; IDIDManagerGetOrCreateArgs: { type: string; properties: { alias: { type: string; description: string; }; provider: { type: string; description: string; }; kms: { type: string; description: string; }; options: { type: string; description: string; }; }; required: string","[","]","; description: string; }; MinimalImportableIdentifier: { type: string; properties: { did: { type: string; description: string; }; alias: { type: string; description: string; }; provider: { type: string; description: string; }; controllerKeyId: { type: string; description: string; }; keys: { type: string; items: { $ref: string; }; }; services: { type: string; items: { $ref: string; }; }; }; required: string","[","]",'; description: string; }; MinimalImportableKey: { $ref: string; description: string; }; "RequireOnly',"<","IKey,(","\\",'"privateKeyHex',"\\",'"',"|","\\",'"type',"\\",'"',"|","\\",'"kms',"\\",'")',">",'": { type: string; properties: { kid: { type: string; description: string; }; kms: { type: string; description: string; }; type: { $ref: string; description: string; }; publicKeyHex: { type: string; description: string; }; privateKeyHex: { type: string; description: string; }; meta: { anyOf: ({ $ref: string; type?: undefined; } ',"|"," { type: string; $ref?: undefined; })","[","]","; description: string; }; }; description: string; }; IDIDManagerRemoveKeyArgs: { type: string; properties: { did: { type: string; description: string; }; kid: { type: string; description: string; }; options: { type: string; description: string; }; }; required: string","[","]","; description: string; }; IDIDManagerRemoveServiceArgs: { type: string; properties: { did: { type: string; description: string; }; id: { type: string; description: string; }; options: { type: string; description: string; }; }; required: string","[","]","; description: string; }; IDIDManagerSetAliasArgs: { type: string; properties: { did: { type: string; description: string; }; alias: { type: string; description: string; }; }; required: string","[","]",'; description: string; }; IDIDManagerUpdateArgs: { type: string; properties: { did: { type: string; description: string; }; document: { type: string; properties: { "@context": { anyOf: ({ type: string; properties: {}; allOf?: undefined; } ',"|"," { type: string; properties?: undefined; allOf?: undefined; } ","|"," { allOf: ({ type: string; items: { type: string; }; properties?: undefined; } ","|"," { type: string; properties: {}; items?: undefined; })","[","]","; type?: undefined; properties?: undefined; })","[","]","; }; id: { type: string; }; alsoKnownAs: { allOf: ({ type: string; items: { type: string; }; properties?: undefined; } ","|"," { type: string; properties: {}; items?: undefined; })","[","]","; }; controller: { anyOf: ({ type: string; allOf?: undefined; } ","|"," { allOf: ({ type: string; items: { type: string; }; properties?: undefined; } ","|"," { type: string; properties: {}; items?: undefined; })","[","]","; type?: undefined; })","[","]","; }; verificationMethod: { allOf: ({ type: string; items: { $ref: string; }; properties?: undefined; } ","|"," { type: string; properties: {}; items?: undefined; })","[","]","; }; service: { allOf: ({ type: string; items: { $ref: string; }; properties?: undefined; } ","|"," { type: string; properties: {}; items?: undefined; })","[","]","; }; publicKey: { allOf: ({ type: string; items: { $ref: string; }; properties?: undefined; } ","|"," { type: string; properties: {}; items?: undefined; })","[","]","; deprecated: boolean; }; authentication: { allOf: ({ type: string; items: { anyOf: ({ type: string; $ref?: undefined; } ","|"," { $ref: string; type?: undefined; })","[","]","; }; properties?: undefined; } ","|"," { type: string; properties: {}; items?: undefined; })","[","]","; }; assertionMethod: { allOf: ({ type: string; items: { anyOf: ({ type: string; $ref?: undefined; } ","|"," { $ref: string; type?: undefined; })","[","]","; }; properties?: undefined; } ","|"," { type: string; properties: {}; items?: undefined; })","[","]","; }; keyAgreement: { allOf: ({ type: string; items: { anyOf: ({ type: string; $ref?: undefined; } ","|"," { $ref: string; type?: undefined; })","[","]","; }; properties?: undefined; } ","|"," { type: string; properties: {}; items?: undefined; })","[","]","; }; capabilityInvocation: { allOf: ({ type: string; items: { anyOf: ({ type: string; $ref?: undefined; } ","|"," { $ref: string; type?: undefined; })","[","]","; }; properties?: undefined; } ","|"," { type: string; properties: {}; items?: undefined; })","[","]","; }; capabilityDelegation: { allOf: ({ type: string; items: { anyOf: ({ type: string; $ref?: undefined; } ","|"," { $ref: string; type?: undefined; })","[","]","; }; properties?: undefined; } ","|"," { type: string; properties: {}; items?: undefined; })","[","]","; }; }; description: string; }; options: { type: string; description: string; }; }; required: string","[","]","; description: string; }; VerificationMethod: { type: string; properties: { id: { type: string; }; type: { type: string; }; controller: { type: string; }; publicKeyBase58: { type: string; }; publicKeyBase64: { type: string; }; publicKeyJwk: { $ref: string; }; publicKeyHex: { type: string; }; publicKeyMultibase: { type: string; }; blockchainAccountId: { type: string; }; ethereumAddress: { type: string; }; }; required: string","[","]","; description: string; }; JsonWebKey: { type: string; properties: { alg: { type: string; }; crv: { type: string; }; e: { type: string; }; ext: { type: string; }; key_ops: { type: string; items: { type: string; }; }; kid: { type: string; }; kty: { type: string; }; n: { type: string; }; use: { type: string; }; x: { type: string; }; y: { type: string; }; }; required: string","[","]","; description: string; }; Service: { type: string; properties: { id: { type: string; }; type: { type: string; }; serviceEndpoint: { anyOf: ({ $ref: string; type?: undefined; items?: undefined; } ","|"," { type: string; items: { $ref: string; }; $ref?: undefined; })","[","]","; }; }; required: string","[","]","; description: string; }; ServiceEndpoint: { anyOf: { type: string; }","[","]","; description: string; }; }; methods: { didManagerAddKey: { description: string; arguments: { $ref: string; }; returnType: { type: string; }; }; didManagerAddService: { description: string; arguments: { $ref: string; }; returnType: { type: string; }; }; didManagerCreate: { description: string; arguments: { $ref: string; }; returnType: { $ref: string; }; }; didManagerDelete: { description: string; arguments: { $ref: string; }; returnType: { type: string; }; }; didManagerFind: { description: string; arguments: { $ref: string; }; returnType: { type: string; items: { $ref: string; }; }; }; didManagerGet: { description: string; arguments: { $ref: string; }; returnType: { $ref: string; }; }; didManagerGetByAlias: { description: string; arguments: { $ref: string; }; returnType: { $ref: string; }; }; didManagerGetOrCreate: { description: string; arguments: { $ref: string; }; returnType: { $ref: string; }; }; didManagerGetProviders: { description: string; arguments: { type: string; }; returnType: { type: string; items: { type: string; }; }; }; didManagerImport: { description: string; arguments: { $ref: string; }; returnType: { $ref: string; }; }; didManagerRemoveKey: { description: string; arguments: { $ref: string; }; returnType: { type: string; }; }; didManagerRemoveService: { description: string; arguments: { $ref: string; }; returnType: { type: string; }; }; didManagerSetAlias: { description: string; arguments: { $ref: string; }; returnType: { type: string; }; }; didManagerUpdate: { description: string; arguments: { $ref: string; }; returnType: { $ref: string; }; }; }; }; }"),(0,a.kt)("td",{parentName:"tr",align:null})))),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Method"),(0,a.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/did-manager.didmanager.didmanageraddkey"},"didManagerAddKey({ did, key, options }, context)")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Adds a key to a DID Document")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/did-manager.didmanager.didmanageraddservice"},"didManagerAddService({ did, service, options }, context)")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Adds a service to a DID Document")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/did-manager.didmanager.didmanagercreate"},"didManagerCreate(args, context)")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Creates and returns a new identifier")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/did-manager.didmanager.didmanagerdelete"},"didManagerDelete({ did }, context)")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Deletes identifier")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/did-manager.didmanager.didmanagerfind"},"didManagerFind(args)")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Returns a list of managed identifiers")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/did-manager.didmanager.didmanagerget"},"didManagerGet({ did })")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Returns a specific identifier")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/did-manager.didmanager.didmanagergetbyalias"},"didManagerGetByAlias({ alias, provider })")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Returns a specific identifier by alias")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/did-manager.didmanager.didmanagergetorcreate"},"didManagerGetOrCreate({ provider, alias, kms, options }, context)")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Returns an existing identifier or creates a new one for a specific alias")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/did-manager.didmanager.didmanagergetproviders"},"didManagerGetProviders()")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Returns a list of available identifier providers")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/did-manager.didmanager.didmanagerimport"},"didManagerImport(identifier, context)")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Imports identifier")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/did-manager.didmanager.didmanagerremovekey"},"didManagerRemoveKey({ did, kid, options }, context)")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Removes a key from a DID Document")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/did-manager.didmanager.didmanagerremoveservice"},"didManagerRemoveService({ did, id, options }, context)")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Removes a service from a DID Document")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/did-manager.didmanager.didmanagersetalias"},"didManagerSetAlias({ did, alias }, context)")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Sets identifier alias")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/did-manager.didmanager.didmanagerupdate"},"didManagerUpdate({ did, document, options }, context)")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Updates the DID document of a managed ",(0,a.kt)("a",{parentName:"td",href:"/docs/api/core-types.iidentifier"},"DID"),".")))))}y.isMDXComponent=!0}}]);