"use strict";(self.webpackChunkgimly_site_docs=self.webpackChunkgimly_site_docs||[]).push([[470],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=i.createContext({}),s=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=s(e.components);return i.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},f=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),p=s(n),f=a,m=p["".concat(c,".").concat(f)]||p[f]||u[f]||r;return n?i.createElement(m,o(o({ref:t},l),{},{components:n})):i.createElement(m,o({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=f;var d={};for(var c in t)hasOwnProperty.call(t,c)&&(d[c]=t[c]);d.originalType=e,d[p]="string"==typeof e?e:a,o[1]=d;for(var s=2;s<r;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2227:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return d},metadata:function(){return s},toc:function(){return p}});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),o=["components"],d={id:"decentralized_identifiers",title:"Decentralized Identifiers"},c=void 0,s={unversionedId:"basics/decentralized_identifiers",id:"basics/decentralized_identifiers",title:"Decentralized Identifiers",description:"A Decentralized Identifier (DID) is a core component of verifiable data, introducing a unique identifier that operates independently from centralized authorities. The subject associated with the DID can assert control over it using cryptographic proofs. In verifiable data systems, a DID can confirm data's origin and ownership by linking it to the proof's verification method.",source:"@site/docs/basics/identifiers.md",sourceDirName:"basics",slug:"/basics/decentralized_identifiers",permalink:"/docs/basics/decentralized_identifiers",draft:!1,tags:[],version:"current",frontMatter:{id:"decentralized_identifiers",title:"Decentralized Identifiers"},sidebar:"docs",previous:{title:"Verifiable Data",permalink:"/docs/basics/verifiable_data"},next:{title:"Signing & Keys",permalink:"/docs/basics/signing_keys"}},l={},p=[{value:"DID Creation",id:"did-creation",level:2},{value:"DID Resolution",id:"did-resolution",level:2},{value:"DID Document",id:"did-document",level:2},{value:"DID Methods",id:"did-methods",level:3}],u={toc:p},f="wrapper";function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,r.kt)(f,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"A ",(0,r.kt)("strong",{parentName:"p"},"Decentralized Identifier (DID)")," is a core component of verifiable data, introducing a unique identifier that operates independently from centralized authorities. The subject associated with the DID can assert control over it using cryptographic proofs. In verifiable data systems, a DID can confirm data's origin and ownership by linking it to the proof's verification method."),(0,r.kt)("p",null,"DIDs come in a variety of forms. The type, or more accurately, the ",(0,r.kt)("strong",{parentName:"p"},"DID Method"),", dictates the manner in which CRUD (Create, Read, Update, Delete) operations are implemented for that specific DID. Each DID Method provides a unique set of trade-offs, tailored to suit different use cases. For instance, a ",(0,r.kt)("inlineCode",{parentName:"p"},"did:web")," can be created without Blockchain, while other DID Methods may depend on it. All variants qualify as DIDs, but they provide different levels of assurances."),(0,r.kt)("div",{className:"video-container"},(0,r.kt)("iframe",{src:"https://www.youtube.com/embed/SHuRRaOBMz4",frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0})),(0,r.kt)("h2",{id:"did-creation"},"DID Creation"),(0,r.kt)("p",null,"Upon the creation of a ",(0,r.kt)("inlineCode",{parentName:"p"},"DID"),", it's usually linked with a pair of private and public keys. The public key can be viewed within the ",(0,r.kt)("inlineCode",{parentName:"p"},"DID Document"),". This setup enables the controller or subject of the ",(0,r.kt)("inlineCode",{parentName:"p"},"DID")," to produce proofs that anyone possessing the corresponding ",(0,r.kt)("inlineCode",{parentName:"p"},"DID Document")," for that ",(0,r.kt)("inlineCode",{parentName:"p"},"DID")," can verify. The method of obtaining the ",(0,r.kt)("inlineCode",{parentName:"p"},"DID Document")," from a ",(0,r.kt)("inlineCode",{parentName:"p"},"DID")," is referred to as ",(0,r.kt)("inlineCode",{parentName:"p"},"DID Resolution"),"."),(0,r.kt)("h2",{id:"did-resolution"},"DID Resolution"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"DID Resolver")," is capable of accepting a ",(0,r.kt)("inlineCode",{parentName:"p"},"DID")," as input and subsequently retrieving the associated ",(0,r.kt)("inlineCode",{parentName:"p"},"DID Document"),". This process plays a significant role in the movement of data within verifiable data systems."),(0,r.kt)("h2",{id:"did-document"},"DID Document"),(0,r.kt)("p",null,"Each ",(0,r.kt)("inlineCode",{parentName:"p"},"DID")," comes with a ",(0,r.kt)("inlineCode",{parentName:"p"},"DID Document")," that provides details about the ",(0,r.kt)("inlineCode",{parentName:"p"},"DID")," subject. For ",(0,r.kt)("inlineCode",{parentName:"p"},"did:web"),", the ",(0,r.kt)("inlineCode",{parentName:"p"},"DID Document")," is hosted on the website in a specific format. It encompasses vital cryptographic data and the services that the ",(0,r.kt)("inlineCode",{parentName:"p"},"DID")," offers. This forms the basis for how ",(0,r.kt)("inlineCode",{parentName:"p"},"DIDs")," can initiate communication with each other."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "@context": "https://w3id.org/did/v1",\n  "id": "did:web:gimly.dev",\n  "publicKey": [\n    {\n      "id": "did:web:gimly.dev#1111aa19bb98a5fd29c15a730cb5064ca128dea19247b896b1a7bdad0b4bccccda9b47366cd1359e740d938e5a47d7bed0501150e8a1623805ac47c489421b1506",\n      "type": "Secp256k1VerificationKey2018",\n      "controller": "did:web:gimly.dev",\n      "publicKeyHex": "1111aa19bb98a5fd29c15a730cb5064ca128dea19247b896b1a7bdad0b4bccccda9b47366cd1359e740d938e5a47d7bed0501150e8a1623805ac47c489421b1506"\n    }\n  ],\n  "authentication": [\n    {\n      "type": "Secp256k1SignatureAuthentication2018",\n      "publicKey": "did:web:gimly.dev#0405aa19bb98a5fd29c15a730cb5064ca128dea19247b896b1a7bdad0b4bccccda9b47366cd1359e740d938e5a47d7bed0501150e8a1623805ac47c489421b1506"\n    }\n  ],\n  "service": [\n    {\n      "id": "did:web:gimly.dev#msg",\n      "type": "Messaging",\n      "serviceEndpoint": "https://gimly.dev/messaging",\n      "description": "Handles incoming POST messages"\n    }\n  ]\n}\n')),(0,r.kt)("h3",{id:"did-methods"},"DID Methods"),(0,r.kt)("p",null,"A Decentralized Identifier (DID) method is a specification for how a specific DID scheme can be implemented on a certain verifiable data registry, such as a blockchain or distributed ledger. Each DID method specifies the precise syntax and control operations (including create, read, update, deactivate) for its DIDs and DID documents."),(0,r.kt)("p",null,'The DID method is identified by the scheme-specific string of the DID, which comes after "did:" and before the first colon in the DID. For instance, in the DID "did:example:123456", "example" would be the DID method.'),(0,r.kt)("p",null,"DID methods allow different DIDs to be resolved in different ways, depending on the system where the DIDs are stored. This enables the use of DIDs across various blockchain systems and other types of registries while maintaining a standardized format and operation set."),(0,r.kt)("p",null,"As of my knowledge cutoff in September 2021, various DID methods had been proposed for different systems, including Bitcoin, Ethereum, Sovrin, and many others. For the most recent and detailed information, please refer to the latest version of the W3C's DID Method Registry."))}m.isMDXComponent=!0}}]);