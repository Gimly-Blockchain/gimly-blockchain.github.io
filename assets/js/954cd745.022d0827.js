"use strict";(self.webpackChunkgimly_site_docs=self.webpackChunkgimly_site_docs||[]).push([[70338],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return y}});var i=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,i,n=function(e,t){if(null==e)return{};var r,i,n={},s=Object.keys(e);for(i=0;i<s.length;i++)r=s[i],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)r=s[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=i.createContext({}),o=function(e){var t=i.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=o(e.components);return i.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=o(r),g=n,y=d["".concat(p,".").concat(g)]||d[g]||u[g]||s;return r?i.createElement(y,a(a({ref:t},c),{},{components:r})):i.createElement(y,a({ref:t},c))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,a=new Array(s);a[0]=g;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:n,a[1]=l;for(var o=2;o<s;o++)a[o]=r[o];return i.createElement.apply(null,a)}return i.createElement.apply(null,r)}g.displayName="MDXCreateElement"},54843:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return y},frontMatter:function(){return l},metadata:function(){return o},toc:function(){return d}});var i=r(87462),n=r(63366),s=(r(67294),r(3905)),a=["components"],l={id:"selective-disclosure.selectivedisclosure",title:"SelectiveDisclosure class",hide_title:!0},p=void 0,o={unversionedId:"api/selective-disclosure.selectivedisclosure",id:"api/selective-disclosure.selectivedisclosure",title:"SelectiveDisclosure class",description:"SelectiveDisclosure class",source:"@site/docs/api/selective-disclosure.selectivedisclosure.md",sourceDirName:"api",slug:"/api/selective-disclosure.selectivedisclosure",permalink:"/docs/api/selective-disclosure.selectivedisclosure",draft:!1,tags:[],version:"current",frontMatter:{id:"selective-disclosure.selectivedisclosure",title:"SelectiveDisclosure class",hide_title:!0}},c={},d=[{value:"SelectiveDisclosure class",id:"selectivedisclosure-class",level:2},{value:"Constructors",id:"constructors",level:2},{value:"Properties",id:"properties",level:2},{value:"Methods",id:"methods",level:2}],u={toc:d},g="wrapper";function y(e){var t=e.components,r=(0,n.Z)(e,a);return(0,s.kt)(g,(0,i.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"selectivedisclosure-class"},"SelectiveDisclosure class"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.")),(0,s.kt)("p",null,"This class adds support for creating ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/uport-project/specs/blob/develop/flows/selectivedisclosure.md"},"Selective Disclosure")," requests and interpret the responses received."),(0,s.kt)("p",null,"This implementation of the uPort protocol uses ",(0,s.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/vc-data-model/#presentations"},"W3C Presentation")," as the response encoding instead of a ",(0,s.kt)("inlineCode",{parentName:"p"},"shareReq"),"."),(0,s.kt)("p",null,"This API may change without a BREAKING CHANGE notice."),(0,s.kt)("b",null,"Signature:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"export declare class SelectiveDisclosure implements IAgentPlugin\n")),(0,s.kt)("b",null,"Implements:")," [IAgentPlugin](/docs/api/core-types.iagentplugin)",(0,s.kt)("h2",{id:"constructors"},"Constructors"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Constructor"),(0,s.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"/docs/api/selective-disclosure.selectivedisclosure._constructor_"},"(constructor)()")),(0,s.kt)("td",{parentName:"tr",align:null}),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("b",null,(0,s.kt)("i",null,"(BETA)"))," Constructs a new instance of the ",(0,s.kt)("code",null,"SelectiveDisclosure")," class")))),(0,s.kt)("h2",{id:"properties"},"Properties"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Property"),(0,s.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,s.kt)("th",{parentName:"tr",align:null},"Type"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"/docs/api/selective-disclosure.selectivedisclosure.methods"},"methods")),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("code",null,"readonly")),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"/docs/api/selective-disclosure.iselectivedisclosure"},"ISelectiveDisclosure")),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("b",null,(0,s.kt)("i",null,"(BETA)")))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"/docs/api/selective-disclosure.selectivedisclosure.schema"},"schema")),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("code",null,"readonly")),(0,s.kt)("td",{parentName:"tr",align:null},"{ components: { schemas: { ICreateProfileCredentialsArgs: { type: string; properties: { holder: { type: string; description: string; }; verifier: { type: string; description: string; }; name: { type: string; description: string; }; picture: { type: string; description: string; }; url: { type: string; description: string; }; save: { type: string; description: string; }; send: { type: string; description: string; }; }; required: string","[","]","; description: string; }; VerifiablePresentation: { type: string; properties: { proof: { $ref: string; }; holder: { type: string; }; verifiableCredential: { type: string; items: { $ref: string; }; }; type: { anyOf: ({ type: string; items: { type: string; }; } ","|"," { type: string; items?: undefined; })","[","]",'; }; "@context": { $ref: string; }; verifier: { type: string; items: { type: string; }; }; issuanceDate: { type: string; }; expirationDate: { type: string; }; id: { type: string; }; }; required: string',"[","]","; description: string; }; ProofType: { type: string; properties: { type: { type: string; }; }; description: string; }; W3CVerifiableCredential: { anyOf: { $ref: string; }","[","]","; description: string; }; VerifiableCredential: { type: string; properties: { proof: { $ref: string; }; issuer: { $ref: string; }; credentialSubject: { $ref: string; }; type: { anyOf: ({ type: string; items: { type: string; }; } ","|"," { type: string; items?: undefined; })","[","]",'; }; "@context": { $ref: string; }; issuanceDate: { type: string; }; expirationDate: { type: string; }; credentialStatus: { $ref: string; }; id: { type: string; }; }; required: string',"[","]","; description: string; }; IssuerType: { anyOf: ({ type: string; properties: { id: { type: string; }; }; required: string","[","]","; } ","|"," { type: string; properties?: undefined; required?: undefined; })","[","]","; description: string; }; CredentialSubject: { type: string; properties: { id: { type: string; }; }; description: string; }; ContextType: { anyOf: ({ type: string; items?: undefined; } ","|"," { type: string; items: { anyOf: { type: string; }","[","]","; }; })","[","]","; description: string; }; CredentialStatusReference: { type: string; properties: { id: { type: string; }; type: { type: string; }; }; required: string","[","]","; description: string; }; CompactJWT: { type: string; description: string; }; ICreateSelectiveDisclosureRequestArgs: { type: string; properties: { data: { $ref: string; }; }; required: string","[","]","; description: string; }; ISelectiveDisclosureRequest: { type: string; properties: { issuer: { type: string; description: string; }; subject: { type: string; description: string; }; replyUrl: { type: string; description: string; }; tag: { type: string; }; claims: { type: string; items: { $ref: string; }; description: string; }; credentials: { type: string; items: { type: string; }; description: string; }; }; required: string","[","]","; description: string; }; ICredentialRequestInput: { type: string; properties: { reason: { type: string; description: string; }; essential: { type: string; description: string; }; credentialType: { type: string; description: string; }; credentialContext: { type: string; description: string; }; claimType: { type: string; description: string; }; claimValue: { type: string; description: string; }; issuers: { type: string; items: { $ref: string; }; description: string; }; }; required: string","[","]","; description: string; }; Issuer: { type: string; properties: { did: { type: string; description: string; }; url: { type: string; description: string; }; }; required: string","[","]","; description: string; }; IGetVerifiableCredentialsForSdrArgs: { type: string; properties: { sdr: { type: string; properties: { subject: { type: string; description: string; }; replyUrl: { type: string; description: string; }; tag: { type: string; }; claims: { type: string; items: { $ref: string; }; description: string; }; credentials: { type: string; items: { type: string; }; description: string; }; }; required: string","[","]","; description: string; }; did: { type: string; description: string; }; }; required: string","[","]","; description: string; }; ICredentialsForSdr: { type: string; properties: { reason: { type: string; description: string; }; essential: { type: string; description: string; }; credentialType: { type: string; description: string; }; credentialContext: { type: string; description: string; }; claimType: { type: string; description: string; }; claimValue: { type: string; description: string; }; issuers: { type: string; items: { $ref: string; }; description: string; }; credentials: { type: string; items: { $ref: string; }; }; }; required: string","[","]","; description: string; }; UniqueVerifiableCredential: { type: string; properties: { hash: { type: string; }; verifiableCredential: { $ref: string; }; }; required: string","[","]","; description: string; }; IValidatePresentationAgainstSdrArgs: { type: string; properties: { presentation: { $ref: string; }; sdr: { $ref: string; }; }; required: string","[","]","; description: string; }; IPresentationValidationResult: { type: string; properties: { valid: { type: string; }; claims: { type: string; items: { $ref: string; }; }; }; required: string","[","]","; description: string; }; }; methods: { createProfilePresentation: { description: string; arguments: { $ref: string; }; returnType: { $ref: string; }; }; createSelectiveDisclosureRequest: { description: string; arguments: { $ref: string; }; returnType: { type: string; }; }; getVerifiableCredentialsForSdr: { description: string; arguments: { $ref: string; }; returnType: { type: string; items: { $ref: string; }; }; }; validatePresentationAgainstSdr: { description: string; arguments: { $ref: string; }; returnType: { $ref: string; }; }; }; }; }"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("b",null,(0,s.kt)("i",null,"(BETA)")))))),(0,s.kt)("h2",{id:"methods"},"Methods"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Method"),(0,s.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"/docs/api/selective-disclosure.selectivedisclosure.createprofilepresentation"},"createProfilePresentation(args, context)")),(0,s.kt)("td",{parentName:"tr",align:null}),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("p",null,(0,s.kt)("b",null,(0,s.kt)("i",null,"(BETA)"))," Creates profile credentials"),(0,s.kt)("p",null,"This API may change without a BREAKING CHANGE notice."))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"/docs/api/selective-disclosure.selectivedisclosure.createselectivedisclosurerequest"},"createSelectiveDisclosureRequest(args, context)")),(0,s.kt)("td",{parentName:"tr",align:null}),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("b",null,(0,s.kt)("i",null,"(BETA)"))," Creates a Selective disclosure request, encoded as a JWT.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"/docs/api/selective-disclosure.selectivedisclosure.getverifiablecredentialsforsdr"},"getVerifiableCredentialsForSdr(args, context)")),(0,s.kt)("td",{parentName:"tr",align:null}),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("b",null,(0,s.kt)("i",null,"(BETA)"))," Gathers the required credentials necessary to fulfill a Selective Disclosure Request. It uses a ",(0,s.kt)("a",{parentName:"td",href:"/docs/api/core-types.idatastoreorm"},"IDataStoreORM")," plugin implementation to query the local database for the required credentials.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"/docs/api/selective-disclosure.selectivedisclosure.validatepresentationagainstsdr"},"validatePresentationAgainstSdr(args, context)")),(0,s.kt)("td",{parentName:"tr",align:null}),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("b",null,(0,s.kt)("i",null,"(BETA)"))," Validates a ",(0,s.kt)("a",{parentName:"td",href:"https://github.com/uport-project/specs/blob/develop/flows/selectivedisclosure.md"},"Selective Disclosure response")," encoded as a ",(0,s.kt)("code",null,"Presentation"))))))}y.isMDXComponent=!0}}]);