"use strict";(self.webpackChunkgimly_site_docs=self.webpackChunkgimly_site_docs||[]).push([[14832],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return c}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var g=n.createContext({}),d=function(e){var t=n.useContext(g),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=d(e.components);return n.createElement(g.Provider,{value:t},e.children)},o="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,g=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),o=d(r),m=a,c=o["".concat(g,".").concat(m)]||o[m]||y[m]||i;return r?n.createElement(c,s(s({ref:t},l),{},{components:r})):n.createElement(c,s({ref:t},l))}));function c(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=m;var p={};for(var g in t)hasOwnProperty.call(t,g)&&(p[g]=t[g]);p.originalType=e,p[o]="string"==typeof e?e:a,s[1]=p;for(var d=2;d<i;d++)s[d]=r[d];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},29757:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return g},default:function(){return c},frontMatter:function(){return p},metadata:function(){return d},toc:function(){return o}});var n=r(87462),a=r(63366),i=(r(67294),r(3905)),s=["components"],p={id:"key-manager.keymanager",title:"KeyManager class",hide_title:!0},g=void 0,d={unversionedId:"api/key-manager.keymanager",id:"api/key-manager.keymanager",title:"KeyManager class",description:"KeyManager class",source:"@site/docs/api/key-manager.keymanager.md",sourceDirName:"api",slug:"/api/key-manager.keymanager",permalink:"/docs/api/key-manager.keymanager",draft:!1,editUrl:"https://github.com/uport-project/gimly-website/edit/main/docs/api/key-manager.keymanager.md",tags:[],version:"current",frontMatter:{id:"key-manager.keymanager",title:"KeyManager class",hide_title:!0}},l={},o=[{value:"KeyManager class",id:"keymanager-class",level:2},{value:"Constructors",id:"constructors",level:2},{value:"Properties",id:"properties",level:2},{value:"Methods",id:"methods",level:2}],y={toc:o},m="wrapper";function c(e){var t=e.components,r=(0,a.Z)(e,s);return(0,i.kt)(m,(0,n.Z)({},y,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"keymanager-class"},"KeyManager class"),(0,i.kt)("p",null,"Agent plugin that implements ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/core-types.ikeymanager"},"IKeyManager")," methods."),(0,i.kt)("p",null,"This plugin orchestrates various implementations of ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/key-manager.abstractkeymanagementsystem"},"AbstractKeyManagementSystem"),", using a KeyStore to remember the link between a key reference, its metadata, and the respective key management system that provides the actual cryptographic capabilities."),(0,i.kt)("p",null,"The methods of this plugin are used automatically by other plugins, such as ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/did-manager.didmanager"},"DIDManager"),", ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/credential-w3c.credentialplugin"},"CredentialPlugin"),", or ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/did-comm.didcomm"},"DIDComm")," to perform their required cryptographic operations using the managed keys."),(0,i.kt)("b",null,"Signature:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"export declare class KeyManager implements IAgentPlugin\n")),(0,i.kt)("b",null,"Implements:")," [IAgentPlugin](/docs/api/core-types.iagentplugin)",(0,i.kt)("h2",{id:"constructors"},"Constructors"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Constructor"),(0,i.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.keymanager._constructor_"},"(constructor)(options)")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Constructs a new instance of the ",(0,i.kt)("code",null,"KeyManager")," class")))),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.keymanager.methods"},"methods")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("code",null,"readonly")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/core-types.ikeymanager"},"IKeyManager")),(0,i.kt)("td",{parentName:"tr",align:null},"Plugin methods")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.keymanager.schema"},"schema")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("code",null,"readonly")),(0,i.kt)("td",{parentName:"tr",align:null},"{ components: { schemas: { IKeyManagerCreateArgs: { type: string; properties: { type: { $ref: string; description: string; }; kms: { type: string; description: string; }; meta: { $ref: string; description: string; }; }; required: string","[","]","; description: string; }; TKeyType: { type: string; enum: string","[","]","; description: string; }; KeyMetadata: { type: string; properties: { algorithms: { type: string; items: { type: string; }; }; }; description: string; }; ManagedKeyInfo: { type: string; properties: { kid: { type: string; description: string; }; kms: { type: string; description: string; }; type: { $ref: string; description: string; }; publicKeyHex: { type: string; description: string; }; meta: { anyOf: ({ $ref: string; type?: undefined; } ","|"," { type: string; $ref?: undefined; })","[","]","; description: string; }; }; required: string","[","]","; description: string; }; IKeyManagerDecryptJWEArgs: { type: string; properties: { kid: { type: string; description: string; }; data: { type: string; description: string; }; }; required: string","[","]","; description: string; }; IKeyManagerDeleteArgs: { type: string; properties: { kid: { type: string; description: string; }; }; required: string","[","]","; description: string; }; IKeyManagerEncryptJWEArgs: { type: string; properties: { kid: { type: string; description: string; }; to: { type: string; properties: { kid: { type: string; description: string; }; type: { $ref: string; description: string; }; publicKeyHex: { type: string; description: string; }; privateKeyHex: { type: string; description: string; }; meta: { anyOf: ({ $ref: string; type?: undefined; } ","|"," { type: string; $ref?: undefined; })","[","]","; description: string; }; }; required: string","[","]","; description: string; }; data: { type: string; description: string; }; }; required: string","[","]","; description: string; }; IKeyManagerGetArgs: { type: string; properties: { kid: { type: string; description: string; }; }; required: string","[","]","; description: string; }; IKey: { type: string; properties: { kid: { type: string; description: string; }; kms: { type: string; description: string; }; type: { $ref: string; description: string; }; publicKeyHex: { type: string; description: string; }; privateKeyHex: { type: string; description: string; }; meta: { anyOf: ({ $ref: string; type?: undefined; } ","|"," { type: string; $ref?: undefined; })","[","]","; description: string; }; }; required: string","[","]",'; description: string; }; MinimalImportableKey: { $ref: string; description: string; }; "RequireOnly',"<","IKey,(","\\",'"privateKeyHex',"\\",'"',"|","\\",'"type',"\\",'"',"|","\\",'"kms',"\\",'")',">",'": { type: string; properties: { kid: { type: string; description: string; }; kms: { type: string; description: string; }; type: { $ref: string; description: string; }; publicKeyHex: { type: string; description: string; }; privateKeyHex: { type: string; description: string; }; meta: { anyOf: ({ $ref: string; type?: undefined; } ',"|"," { type: string; $ref?: undefined; })","[","]","; description: string; }; }; description: string; }; IKeyManagerSharedSecretArgs: { type: string; properties: { secretKeyRef: { type: string; description: string; }; publicKey: { type: string; properties: { publicKeyHex: { type: string; description: string; }; type: { $ref: string; description: string; }; }; required: string","[","]","; description: string; }; }; required: string","[","]","; description: string; }; IKeyManagerSignArgs: { type: string; properties: { keyRef: { type: string; description: string; }; algorithm: { type: string; description: string; }; data: { type: string; description: string; }; encoding: { type: string; enum: string","[","]","; description: string; }; }; required: string","[","]","; description: string; }; IKeyManagerSignEthTXArgs: { type: string; properties: { kid: { type: string; description: string; }; transaction: { type: string; description: string; }; }; required: string","[","]","; description: string; }; IKeyManagerSignJWTArgs: { type: string; properties: { kid: { type: string; description: string; }; data: { anyOf: ({ type: string; properties?: undefined; required?: undefined; additionalProperties?: undefined; } ","|"," { type: string; properties: { BYTES_PER_ELEMENT: { type: string; }; buffer: { anyOf: ({ type: string; properties: { byteLength: { type: string; }; }; required: string","[","]","; } ","|"," { type?: undefined; properties?: undefined; required?: undefined; })","[","]","; }; byteLength: { type: string; }; byteOffset: { type: string; }; length: { type: string; }; }; required: string","[","]","; additionalProperties: { type: string; }; })","[","]","; description: string; }; }; required: string","[","]","; description: string; }; }; methods: { keyManagerCreate: { description: string; arguments: { $ref: string; }; returnType: { $ref: string; }; }; keyManagerDecryptJWE: { description: string; arguments: { $ref: string; }; returnType: { type: string; }; }; keyManagerDelete: { description: string; arguments: { $ref: string; }; returnType: { type: string; }; }; keyManagerEncryptJWE: { description: string; arguments: { $ref: string; }; returnType: { type: string; }; }; keyManagerGet: { description: string; arguments: { $ref: string; }; returnType: { $ref: string; }; }; keyManagerGetKeyManagementSystems: { description: string; arguments: { type: string; }; returnType: { type: string; items: { type: string; }; }; }; keyManagerImport: { description: string; arguments: { $ref: string; }; returnType: { $ref: string; }; }; keyManagerSharedSecret: { description: string; arguments: { $ref: string; }; returnType: { type: string; }; }; keyManagerSign: { description: string; arguments: { $ref: string; }; returnType: { type: string; }; }; keyManagerSignEthTX: { description: string; arguments: { $ref: string; }; returnType: { type: string; }; }; keyManagerSignJWT: { description: string; arguments: { $ref: string; }; returnType: { type: string; }; }; }; }; }"),(0,i.kt)("td",{parentName:"tr",align:null})))),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Method"),(0,i.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.keymanager.createx25519ecdh"},"createX25519ECDH(secretKeyRef)")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.keymanager.keymanagercreate"},"keyManagerCreate(args)")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Creates and returns a new key")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.keymanager.keymanagerdecryptjwe"},"keyManagerDecryptJWE({ kid, data })")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Decrypts data This API may change without a BREAKING CHANGE notice.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.keymanager.keymanagerdelete"},"keyManagerDelete({ kid })")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Deletes a key")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.keymanager.keymanagerencryptjwe"},"keyManagerEncryptJWE({ kid, to, data })")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Encrypts data This API may change without a BREAKING CHANGE notice.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.keymanager.keymanagerget"},"keyManagerGet({ kid })")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Returns an existing key")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.keymanager.keymanagergetkeymanagementsystems"},"keyManagerGetKeyManagementSystems()")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Lists available key management systems")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.keymanager.keymanagerimport"},"keyManagerImport(key)")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Imports a created key")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.keymanager.keymanagersharedsecret"},"keyManagerSharedSecret(args)")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("p",null,"Compute a shared secret with the public key of another party."),(0,i.kt)("p",null,"This computes the raw shared secret (the result of a Diffie-Hellman computation) To use this for symmetric encryption you MUST apply a KDF on the result."))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.keymanager.keymanagersign"},"keyManagerSign(args)")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Generates a signature according to the algorithm specified.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.keymanager.keymanagersignethtx"},"keyManagerSignEthTX({ kid, transaction })")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Signs Ethereum transaction")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/key-manager.keymanager.keymanagersignjwt"},"keyManagerSignJWT({ kid, data })")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Signs JWT")))))}c.isMDXComponent=!0}}]);