"use strict";(self.webpackChunkgimly_site_docs=self.webpackChunkgimly_site_docs||[]).push([[78953],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return g}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=c(t),m=r,g=p["".concat(s,".").concat(m)]||p[m]||u[m]||i;return t?a.createElement(g,l(l({ref:n},d),{},{components:t})):a.createElement(g,l({ref:n},d))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[p]="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},54786:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return p}});var a=t(87462),r=t(63366),i=(t(67294),t(3905)),l=["components"],o={id:"rest_api_specification",title:"REST API Specification",sidebar_label:"REST API Specification"},s=void 0,c={unversionedId:"public_api/rest_api_specification",id:"public_api/rest_api_specification",title:"REST API Specification",description:"This guide covers setting up an agent and creating identifiers in Node.",source:"@site/docs/public_api/rest_api_specification.md",sourceDirName:"public_api",slug:"/public_api/rest_api_specification",permalink:"/docs/public_api/rest_api_specification",draft:!1,tags:[],version:"current",frontMatter:{id:"rest_api_specification",title:"REST API Specification",sidebar_label:"REST API Specification"},sidebar:"docs",previous:{title:"Gimly React Plugin",permalink:"/docs/mobile_tools/gimly_react"}},d={},p=[{value:"Note",id:"note",level:4},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Bootstrap Gimly",id:"bootstrap-gimly",level:2},{value:"App Logic",id:"app-logic",level:2},{value:"List Identifiers",id:"list-identifiers",level:3},{value:"Create Identifier",id:"create-identifier",level:3},{value:"Create credential",id:"create-credential",level:3},{value:"Verify credential",id:"verify-credential",level:3}],u={toc:p},m="wrapper";function g(e){var n=e.components,t=(0,r.Z)(e,l);return(0,i.kt)(m,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This guide covers setting up an agent and creating identifiers in Node."),(0,i.kt)("h4",{id:"note"},"Note"),(0,i.kt)("p",null,"A finished example of this tutorial can be found on github at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/gimlylabs/gimly-nodejs-tutorial"},"https://github.com/gimlylabs/gimly-nodejs-tutorial")),(0,i.kt)("p",null,"This tutorial has been updated to reflect the switch to ESM. Please take care to ensure you use proper ESM syntax in imports and commands. Also please carefully note ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),"."),(0,i.kt)("p",null,"Additional info regarding ESM can be found at the following links:\n",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/esm-node.html"},"https://www.typescriptlang.org/docs/handbook/esm-node.html"),"\n",(0,i.kt)("a",{parentName:"p",href:"https://nodejs.org/api/esm.html"},"https://nodejs.org/api/esm.html"),"\n",(0,i.kt)("a",{parentName:"p",href:"https://caniuse.com/?search=modules"},"https://caniuse.com/?search=modules")),(0,i.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("p",null,"You need to have Node v14 or later installed. In this example, we use yarn as the package manager, but you can also use\nnpm."),(0,i.kt)("p",null,"Start by creating a directory for our project and initializing the npm package."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir gimly-agent && cd gimly-agent\nyarn init -y\n")),(0,i.kt)("p",null,"Set project to use ESM"),(0,i.kt)("p",null,"in ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'"type": "module"\n')),(0,i.kt)("p",null,"Install dev dependencies"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add typescript ts-node --dev\n")),(0,i.kt)("p",null,"Install Gimly core and plugins"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @gimly/core @gimly/credential-w3c @gimly/data-store @gimly/did-manager @gimly/did-provider-ethr @gimly/did-resolver @gimly/key-manager @gimly/kms-local ethr-did-resolver web-did-resolver\n")),(0,i.kt)("p",null,"Install ",(0,i.kt)("inlineCode",{parentName:"p"},"sqlite")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add sqlite3\n")),(0,i.kt)("p",null,"Add a tsconfig.json to your project"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "compilerOptions": {\n    "preserveConstEnums": true,\n    "strict": true,\n    "target": "esnext",\n    "module": "esnext",\n    "rootDir": "./",\n    "moduleResolution": "node",\n    "esModuleInterop": true,\n    "downlevelIteration": true\n  }\n}\n')),(0,i.kt)("h2",{id:"bootstrap-gimly"},"Bootstrap Gimly"),(0,i.kt)("p",null,"We bootstrap Gimly by creating a setup file and initializing the agent. Create a setup file in ",(0,i.kt)("inlineCode",{parentName:"p"},"src/gimly/setup.ts"),"\nand import the following dependencies:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// Core interfaces\nimport {\n  createAgent,\n  IDIDManager,\n  IResolver,\n  IDataStore,\n  IDataStoreORM,\n  IKeyManager,\n  ICredentialPlugin,\n} from '@gimly/core'\n\n// Core identity manager plugin\nimport { DIDManager } from '@gimly/did-manager'\n\n// Ethr did identity provider\nimport { EthrDIDProvider } from '@gimly/did-provider-ethr'\n\n// Core key manager plugin\nimport { KeyManager } from '@gimly/key-manager'\n\n// Custom key management system for RN\nimport { KeyManagementSystem, SecretBox } from '@gimly/kms-local'\n\n// W3C Verifiable Credential plugin\nimport { CredentialPlugin } from '@gimly/credential-w3c'\n\n// Custom resolvers\nimport { DIDResolverPlugin } from '@gimly/did-resolver'\nimport { Resolver } from 'did-resolver'\nimport { getResolver as ethrDidResolver } from 'ethr-did-resolver'\nimport { getResolver as webDidResolver } from 'web-did-resolver'\n\n// Storage plugin using TypeOrm\nimport { Entities, KeyStore, DIDStore, PrivateKeyStore, migrations } from '@gimly/data-store'\n\n// TypeORM is installed with `@gimly/data-store`\nimport { DataSource } from 'typeorm'\n")),(0,i.kt)("p",null,"Create some variables that we will use later"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// This will be the name for the local sqlite database for demo purposes\nconst DATABASE_FILE = 'database.sqlite'\n\n// You will need to get a project ID from infura https://www.infura.io\nconst INFURA_PROJECT_ID = '<your PROJECT_ID here>'\n\n// This will be the secret key for the KMS\nconst KMS_SECRET_KEY =\n  '< you can generate a key by running `npx @gimly/cli config create-secret-key` in a terminal>'\n")),(0,i.kt)("p",null,"Initialise a database using TypeORM"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const dbConnection = new DataSource({\n  type: 'sqlite',\n  database: DATABASE_FILE,\n  synchronize: false,\n  migrations,\n  migrationsRun: true,\n  logging: ['error', 'info', 'warn'],\n  entities: Entities,\n}).initialize()\n")),(0,i.kt)("p",null,"Create the agent by using the createAgent method from ",(0,i.kt)("inlineCode",{parentName:"p"},"@gimly/core")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export const agent = createAgent<\n  IDIDManager & IKeyManager & IDataStore & IDataStoreORM & IResolver & ICredentialPlugin\n>({\n  plugins: [\n    new KeyManager({\n      store: new KeyStore(dbConnection),\n      kms: {\n        local: new KeyManagementSystem(new PrivateKeyStore(dbConnection, new SecretBox(KMS_SECRET_KEY))),\n      },\n    }),\n    new DIDManager({\n      store: new DIDStore(dbConnection),\n      defaultProvider: 'did:ethr:goerli',\n      providers: {\n        'did:ethr:goerli': new EthrDIDProvider({\n          defaultKms: 'local',\n          network: 'goerli',\n          rpcUrl: 'https://goerli.infura.io/v3/' + INFURA_PROJECT_ID,\n        }),\n      },\n    }),\n    new DIDResolverPlugin({\n      resolver: new Resolver({\n        ...ethrDidResolver({ infuraProjectId: INFURA_PROJECT_ID }),\n        ...webDidResolver(),\n      }),\n    }),\n    new CredentialPlugin(),\n  ],\n})\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Note:")),(0,i.kt)("p",{parentName:"blockquote"},"The types you specify for agent creation are optional, but may be very helpful when writing TypeScript, as long as they\nmatch the plugins that you add to the agent."),(0,i.kt)("pre",{parentName:"blockquote"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"<IDIDManager & IKeyManager & IDataStore & IDataStoreORM & IResolver & ICredentialPlugin>\n")),(0,i.kt)("p",{parentName:"blockquote"},"These types help the typescript compiler to figure out what plugin methods get exposed by the agent and what parameters\nthose methods require. These types are also very helpful for development in VSCode, or other IDEs that provide\nauto-complete.")),(0,i.kt)("p",null,"That's one possible agent setup. Let's use it to create and list identifiers."),(0,i.kt)("h2",{id:"app-logic"},"App Logic"),(0,i.kt)("p",null,"Create 4 files ",(0,i.kt)("inlineCode",{parentName:"p"},"./src/create-identifier.ts"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"./src/list-identifiers.ts"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"./src/create-credential.ts")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"./src/verify-credential.ts")),(0,i.kt)("p",null,"Add the following code to ",(0,i.kt)("inlineCode",{parentName:"p"},"./src/list-identifiers.ts")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { agent } from './gimly/setup.js'\n\nasync function main() {\n  const identifiers = await agent.didManagerFind()\n\n  console.log(`There are ${identifiers.length} identifiers`)\n\n  if (identifiers.length > 0) {\n    identifiers.map((id) => {\n      console.log(id)\n      console.log('..................')\n    })\n  }\n}\n\nmain().catch(console.log)\n")),(0,i.kt)("p",null,"Add the following code to ",(0,i.kt)("inlineCode",{parentName:"p"},"./src/create-identifier.ts")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { agent } from './gimly/setup.js'\n\nasync function main() {\n  const identifier = await agent.didManagerCreate({ alias: 'default' })\n  console.log(`New identifier created`)\n  console.log(JSON.stringify(identifier, null, 2))\n}\n\nmain().catch(console.log)\n")),(0,i.kt)("p",null,"Add the following code to ",(0,i.kt)("inlineCode",{parentName:"p"},"./src/create-credential.ts")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { agent } from './gimly/setup.js'\n\nasync function main() {\n  const identifier = await agent.didManagerGetByAlias({ alias: 'default' })\n\n  const verifiableCredential = await agent.createVerifiableCredential({\n    credential: {\n      issuer: { id: identifier.did },\n      credentialSubject: {\n        id: 'did:web:example.com',\n        you: 'Rock',\n      },\n    },\n    proofFormat: 'jwt',\n  })\n  console.log(`New credential created`)\n  console.log(JSON.stringify(verifiableCredential, null, 2))\n}\n\nmain().catch(console.log)\n")),(0,i.kt)("p",null,"Add the following code to ",(0,i.kt)("inlineCode",{parentName:"p"},"./src/verify-credential.ts")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { agent } from './gimly/setup.js'\n\nasync function main() {\n  const result = await agent.verifyCredential({\n    credential: {\n      credentialSubject: {\n        you: 'Rock',\n        id: 'did:web:example.com',\n      },\n      issuer: {\n        id: 'did:ethr:goerli:0x0350eeeea1410c5b152f1a88e0ffe8bb8a0bc3df868b740eb2352b1dbf93b59c16',\n      },\n      type: ['VerifiableCredential'],\n      '@context': ['https://www.w3.org/2018/credentials/v1'],\n      issuanceDate: '2022-10-28T11:54:22.000Z',\n      proof: {\n        type: 'JwtProof2020',\n        jwt: 'eyJhbGciOiJFUzI1NksiLCJ0eXAiOiJKV1QifQ.eyJ2YyI6eyJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSJdLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIl0sImNyZWRlbnRpYWxTdWJqZWN0Ijp7InlvdSI6IlJvY2sifX0sInN1YiI6ImRpZDp3ZWI6ZXhhbXBsZS5jb20iLCJuYmYiOjE2NjY5NTgwNjIsImlzcyI6ImRpZDpldGhyOmdvZXJsaToweDAzNTBlZWVlYTE0MTBjNWIxNTJmMWE4OGUwZmZlOGJiOGEwYmMzZGY4NjhiNzQwZWIyMzUyYjFkYmY5M2I1OWMxNiJ9.EPeuQBpkK13V9wu66SLg7u8ebY2OS8b2Biah2Vw-RI-Atui2rtujQkVc2t9m1Eqm4XQFECfysgQBdWwnSDvIjw',\n      },\n    },\n  })\n  console.log(`Credential verified`, result.verified)\n}\n\nmain().catch(console.log)\n")),(0,i.kt)("h3",{id:"list-identifiers"},"List Identifiers"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn ts-node --esm ./src/list-identifiers.ts\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Expected output")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ ts-node ./src/list-identifiers\nThere are 0 identifiers\n")),(0,i.kt)("h3",{id:"create-identifier"},"Create Identifier"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn ts-node --esm ./src/create-identifier.ts\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Expected output")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'$ ts-node --esm ./src/create-identifier.ts\nNew identifier created\n{\n  "did": "did:ethr:goerli:0x0350eeeea1410c5b152f1a88e0ffe8bb8a0bc3df868b740eb2352b1dbf93b59c16",\n  "controllerKeyId": "0450eeeea1410c5b152f1a88e0ffe8bb8a0bc3df868b740eb2352b1dbf93b59c1623b138f54e600141c5119f391eea730d3b1a089ed4ad35b25c2c646dee27a7bd",\n  "keys": [\n    {\n      "type": "Secp256k1",\n      "kid": "0450eeeea1410c5b152f1a88e0ffe8bb8a0bc3df868b740eb2352b1dbf93b59c1623b138f54e600141c5119f391eea730d3b1a089ed4ad35b25c2c646dee27a7bd",\n      "publicKeyHex": "0450eeeea1410c5b152f1a88e0ffe8bb8a0bc3df868b740eb2352b1dbf93b59c1623b138f54e600141c5119f391eea730d3b1a089ed4ad35b25c2c646dee27a7bd",\n      "meta": {\n        "algorithms": [\n          "ES256K",\n          "ES256K-R",\n          "eth_signTransaction",\n          "eth_signTypedData",\n          "eth_signMessage"\n        ]\n      },\n      "kms": "local"\n    }\n  ],\n  "services": [],\n  "provider": "did:ethr:goerli",\n  "alias": "default"\n}\n')),(0,i.kt)("h3",{id:"create-credential"},"Create credential"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn ts-node --esm ./src/create-credential.ts\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Expected output")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'$ ts-node --esm ./src/create-credential.ts\nNew credential created\n{\n  "credentialSubject": {\n    "you": "Rock",\n    "id": "did:web:example.com"\n  },\n  "issuer": {\n    "id": "did:ethr:goerli:0x0350eeeea1410c5b152f1a88e0ffe8bb8a0bc3df868b740eb2352b1dbf93b59c16"\n  },\n  "type": [\n    "VerifiableCredential"\n  ],\n  "@context": [\n    "https://www.w3.org/2018/credentials/v1"\n  ],\n  "issuanceDate": "2022-10-28T11:54:22.000Z",\n  "proof": {\n    "type": "JwtProof2020",\n    "jwt": "eyJhbGciOiJFUzI1NksiLCJ0eXAiOiJKV1QifQ.eyJ2YyI6eyJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSJdLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIl0sImNyZWRlbnRpYWxTdWJqZWN0Ijp7InlvdSI6IlJvY2sifX0sInN1YiI6ImRpZDp3ZWI6ZXhhbXBsZS5jb20iLCJuYmYiOjE2NjY5NTgwNjIsImlzcyI6ImRpZDpldGhyOmdvZXJsaToweDAzNTBlZWVlYTE0MTBjNWIxNTJmMWE4OGUwZmZlOGJiOGEwYmMzZGY4NjhiNzQwZWIyMzUyYjFkYmY5M2I1OWMxNiJ9.EPeuQBpkK13V9wu66SLg7u8ebY2OS8b2Biah2Vw-RI-Atui2rtujQkVc2t9m1Eqm4XQFECfysgQBdWwnSDvIjw"\n  }\n}\n')),(0,i.kt)("h3",{id:"verify-credential"},"Verify credential"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn ts-node --esm ./src/verify-credential.ts\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Expected output")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ ts-node --esm ./src/verify-credential.ts\nCredential verified true\n")),(0,i.kt)("p",null,"Congrats, You have set up the agent, created identifiers, created and verified a credential!"))}g.isMDXComponent=!0}}]);