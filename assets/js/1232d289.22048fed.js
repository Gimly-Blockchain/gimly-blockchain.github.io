"use strict";(self.webpackChunkgimly_site_docs=self.webpackChunkgimly_site_docs||[]).push([[54508],{3905:function(e,n,r){r.d(n,{Zo:function(){return a},kt:function(){return g}});var t=r(67294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=t.createContext({}),d=function(e){var n=t.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},a=function(e){var n=d(e.components);return t.createElement(p.Provider,{value:n},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},l=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,a=c(e,["components","mdxType","originalType","parentName"]),u=d(r),l=i,g=u["".concat(p,".").concat(l)]||u[l]||y[l]||o;return r?t.createElement(g,s(s({ref:n},a),{},{components:r})):t.createElement(g,s({ref:n},a))}));function g(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=r.length,s=new Array(o);s[0]=l;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c[u]="string"==typeof e?e:i,s[1]=c;for(var d=2;d<o;d++)s[d]=r[d];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}l.displayName="MDXCreateElement"},63718:function(e,n,r){r.r(n),r.d(n,{assets:function(){return a},contentTitle:function(){return p},default:function(){return g},frontMatter:function(){return c},metadata:function(){return d},toc:function(){return u}});var t=r(87462),i=r(63366),o=(r(67294),r(3905)),s=["components"],c={id:"did-discovery.diddiscovery.schema",title:"DIDDiscovery.schema property",hide_title:!0},p=void 0,d={unversionedId:"api/did-discovery.diddiscovery.schema",id:"api/did-discovery.diddiscovery.schema",title:"DIDDiscovery.schema property",description:"DIDDiscovery.schema property",source:"@site/docs/api/did-discovery.diddiscovery.schema.md",sourceDirName:"api",slug:"/api/did-discovery.diddiscovery.schema",permalink:"/docs/api/did-discovery.diddiscovery.schema",draft:!1,tags:[],version:"current",frontMatter:{id:"did-discovery.diddiscovery.schema",title:"DIDDiscovery.schema property",hide_title:!0}},a={},u=[{value:"DIDDiscovery.schema property",id:"diddiscoveryschema-property",level:2}],y={toc:u},l="wrapper";function g(e){var n=e.components,r=(0,i.Z)(e,s);return(0,o.kt)(l,(0,t.Z)({},y,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"diddiscoveryschema-property"},"DIDDiscovery.schema property"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.")),(0,o.kt)("b",null,"Signature:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"readonly schema: {\n        components: {\n            schemas: {\n                IDIDDiscoveryDiscoverDidArgs: {\n                    type: string;\n                    properties: {\n                        query: {\n                            type: string;\n                            description: string;\n                        };\n                        options: {\n                            type: string;\n                            description: string;\n                        };\n                    };\n                    required: string[];\n                    description: string;\n                };\n                IDIDDiscoveryDiscoverDidResult: {\n                    type: string;\n                    properties: {\n                        query: {\n                            type: string;\n                            description: string;\n                        };\n                        options: {\n                            type: string;\n                            description: string;\n                        };\n                        results: {\n                            type: string;\n                            items: {\n                                $ref: string;\n                            };\n                            description: string;\n                        };\n                        errors: {\n                            type: string;\n                            additionalProperties: {\n                                type: string;\n                            };\n                            description: string;\n                        };\n                    };\n                    required: string[];\n                    description: string;\n                };\n                IDIDDiscoveryProviderResult: {\n                    type: string;\n                    properties: {\n                        provider: {\n                            type: string;\n                            description: string;\n                        };\n                        matches: {\n                            type: string;\n                            items: {\n                                $ref: string;\n                            };\n                            description: string;\n                        };\n                    };\n                    required: string[];\n                    description: string;\n                };\n                IDIDDiscoverMatch: {\n                    type: string;\n                    properties: {\n                        did: {\n                            type: string;\n                            description: string;\n                        };\n                        metaData: {\n                            type: string;\n                            description: string;\n                        };\n                    };\n                    required: string[];\n                    description: string;\n                };\n            };\n            methods: {\n                discoverDid: {\n                    description: string;\n                    arguments: {\n                        $ref: string;\n                    };\n                    returnType: {\n                        $ref: string;\n                    };\n                };\n            };\n        };\n    };\n")))}g.isMDXComponent=!0}}]);