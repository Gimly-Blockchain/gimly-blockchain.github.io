"use strict";(self.webpackChunkgimly_site_docs=self.webpackChunkgimly_site_docs||[]).push([[8234],{3905:function(e,t,r){r.d(t,{Zo:function(){return d},kt:function(){return y}});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),o=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},d=function(e){var t=o(e.components);return n.createElement(l.Provider,{value:t},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),g=o(r),u=i,y=g["".concat(l,".").concat(u)]||g[u]||c[u]||a;return r?n.createElement(y,s(s({ref:t},d),{},{components:r})):n.createElement(y,s({ref:t},d))}));function y(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,s=new Array(a);s[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[g]="string"==typeof e?e:i,s[1]=p;for(var o=2;o<a;o++)s[o]=r[o];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},70435:function(e,t,r){r.r(t),r.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return y},frontMatter:function(){return p},metadata:function(){return o},toc:function(){return g}});var n=r(87462),i=r(63366),a=(r(67294),r(3905)),s=["components"],p={id:"credential-w3c.credentialplugin",title:"CredentialPlugin class",hide_title:!0},l=void 0,o={unversionedId:"api/credential-w3c.credentialplugin",id:"api/credential-w3c.credentialplugin",title:"CredentialPlugin class",description:"CredentialPlugin class",source:"@site/docs/api/credential-w3c.credentialplugin.md",sourceDirName:"api",slug:"/api/credential-w3c.credentialplugin",permalink:"/docs/api/credential-w3c.credentialplugin",draft:!1,tags:[],version:"current",frontMatter:{id:"credential-w3c.credentialplugin",title:"CredentialPlugin class",hide_title:!0}},d={},g=[{value:"CredentialPlugin class",id:"credentialplugin-class",level:2},{value:"Constructors",id:"constructors",level:2},{value:"Properties",id:"properties",level:2},{value:"Methods",id:"methods",level:2}],c={toc:g},u="wrapper";function y(e){var t=e.components,r=(0,i.Z)(e,s);return(0,a.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"credentialplugin-class"},"CredentialPlugin class"),(0,a.kt)("p",null,"A Gimly plugin that implements the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api/core-types.icredentialplugin"},"ICredentialPlugin")," methods."),(0,a.kt)("b",null,"Signature:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export declare class CredentialPlugin implements IAgentPlugin\n")),(0,a.kt)("b",null,"Implements:")," [IAgentPlugin](/docs/api/core-types.iagentplugin)",(0,a.kt)("h2",{id:"constructors"},"Constructors"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Constructor"),(0,a.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/credential-w3c.credentialplugin._constructor_"},"(constructor)()")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Constructs a new instance of the ",(0,a.kt)("code",null,"CredentialPlugin")," class")))),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/credential-w3c.credentialplugin.methods"},"methods")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"readonly")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/core-types.icredentialplugin"},"ICredentialPlugin")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/credential-w3c.credentialplugin.schema"},"schema")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"readonly")),(0,a.kt)("td",{parentName:"tr",align:null},"{ components: { schemas: { IVerifyCredentialArgs: { type: string; properties: { credential: { $ref: string; description: string; }; fetchRemoteContexts: { type: string; description: string; }; policies: { $ref: string; description: string; }; }; required: string","[","]","; additionalProperties: { description: string; }; description: string; }; W3CVerifiableCredential: { anyOf: { $ref: string; }","[","]","; description: string; }; VerifiableCredential: { type: string; properties: { proof: { $ref: string; }; issuer: { $ref: string; }; credentialSubject: { $ref: string; }; type: { anyOf: ({ type: string; items: { type: string; }; } ","|"," { type: string; items?: undefined; })","[","]",'; }; "@context": { $ref: string; }; issuanceDate: { type: string; }; expirationDate: { type: string; }; credentialStatus: { $ref: string; }; id: { type: string; }; }; required: string',"[","]","; description: string; }; ProofType: { type: string; properties: { type: { type: string; }; }; description: string; }; IssuerType: { anyOf: ({ type: string; properties: { id: { type: string; }; }; required: string","[","]","; } ","|"," { type: string; properties?: undefined; required?: undefined; })","[","]","; description: string; }; CredentialSubject: { type: string; properties: { id: { type: string; }; }; description: string; }; ContextType: { anyOf: ({ type: string; items?: undefined; } ","|"," { type: string; items: { anyOf: { type: string; }","[","]","; }; })","[","]","; description: string; }; CredentialStatusReference: { type: string; properties: { id: { type: string; }; type: { type: string; }; }; required: string","[","]","; description: string; }; CompactJWT: { type: string; description: string; }; VerificationPolicies: { type: string; properties: { now: { type: string; description: string; }; issuanceDate: { type: string; description: string; }; expirationDate: { type: string; description: string; }; audience: { type: string; description: string; }; credentialStatus: { type: string; description: string; }; }; additionalProperties: { description: string; }; description: string; }; IVerifyResult: { type: string; properties: { verified: { type: string; description: string; }; error: { $ref: string; description: string; }; }; required: string","[","]","; additionalProperties: { description: string; }; description: string; }; IError: { type: string; properties: { message: { type: string; description: string; }; errorCode: { type: string; description: string; }; }; description: string; }; IVerifyPresentationArgs: { type: string; properties: { presentation: { $ref: string; description: string; }; challenge: { type: string; description: string; }; domain: { type: string; description: string; }; fetchRemoteContexts: { type: string; description: string; }; policies: { $ref: string; description: string; }; }; required: string","[","]","; additionalProperties: { description: string; }; description: string; }; W3CVerifiablePresentation: { anyOf: { $ref: string; }","[","]","; description: string; }; VerifiablePresentation: { type: string; properties: { proof: { $ref: string; }; holder: { type: string; }; verifiableCredential: { type: string; items: { $ref: string; }; }; type: { anyOf: ({ type: string; items: { type: string; }; } ","|"," { type: string; items?: undefined; })","[","]",'; }; "@context": { $ref: string; }; verifier: { type: string; items: { type: string; }; }; issuanceDate: { type: string; }; expirationDate: { type: string; }; id: { type: string; }; }; required: string',"[","]","; description: string; }; ICreateVerifiableCredentialArgs: { type: string; properties: { credential: { $ref: string; description: string; }; save: { type: string; description: string; deprecated: string; }; proofFormat: { $ref: string; description: string; }; removeOriginalFields: { type: string; description: string; }; keyRef: { type: string; description: string; }; fetchRemoteContexts: { type: string; description: string; }; }; required: string","[","]",'; additionalProperties: { description: string; }; description: string; }; CredentialPayload: { type: string; properties: { issuer: { $ref: string; }; credentialSubject: { $ref: string; }; type: { type: string; items: { type: string; }; }; "@context": { $ref: string; }; issuanceDate: { $ref: string; }; expirationDate: { $ref: string; }; credentialStatus: { $ref: string; }; id: { type: string; }; }; required: string',"[","]","; description: string; }; DateType: { type: string; description: string; }; ProofFormat: { type: string; enum: string","[","]","; description: string; }; ICreateVerifiablePresentationArgs: { type: string; properties: { presentation: { $ref: string; description: string; }; save: { type: string; description: string; deprecated: string; }; challenge: { type: string; description: string; }; domain: { type: string; description: string; }; proofFormat: { $ref: string; description: string; }; removeOriginalFields: { type: string; description: string; }; keyRef: { type: string; description: string; }; fetchRemoteContexts: { type: string; description: string; }; }; required: string","[","]",'; additionalProperties: { description: string; }; description: string; }; PresentationPayload: { type: string; properties: { holder: { type: string; }; verifiableCredential: { type: string; items: { $ref: string; }; }; type: { type: string; items: { type: string; }; }; "@context": { $ref: string; }; verifier: { type: string; items: { type: string; }; }; issuanceDate: { $ref: string; }; expirationDate: { $ref: string; }; id: { type: string; }; }; required: string',"[","]","; description: string; }; }; methods: { verifyCredential: { description: string; arguments: { $ref: string; }; returnType: { $ref: string; }; }; verifyPresentation: { description: string; arguments: { $ref: string; }; returnType: { $ref: string; }; }; createVerifiableCredential: { description: string; arguments: { $ref: string; }; returnType: { $ref: string; }; }; createVerifiablePresentation: { description: string; arguments: { $ref: string; }; returnType: { $ref: string; }; }; }; }; }"),(0,a.kt)("td",{parentName:"tr",align:null})))),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Method"),(0,a.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/credential-w3c.credentialplugin.createverifiablecredential"},"createVerifiableCredential(args, context)")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Creates a Verifiable Credential. The payload, signer and format are chosen based on the ",(0,a.kt)("code",null,"args")," parameter.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/credential-w3c.credentialplugin.createverifiablepresentation"},"createVerifiablePresentation(args, context)")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Creates a Verifiable Presentation. The payload, signer and format are chosen based on the ",(0,a.kt)("code",null,"args")," parameter.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/credential-w3c.credentialplugin.verifycredential"},"verifyCredential(args, context)")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Verifies a Verifiable Credential JWT, LDS Format or EIP712.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api/credential-w3c.credentialplugin.verifypresentation"},"verifyPresentation(args, context)")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Verifies a Verifiable Presentation JWT or LDS Format.")))))}y.isMDXComponent=!0}}]);