"use strict";(self.webpackChunkgimly_site_docs=self.webpackChunkgimly_site_docs||[]).push([[22577],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return m}});var i=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function d(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,i,n=function(e,t){if(null==e)return{};var r,i,n={},o=Object.keys(e);for(i=0;i<o.length;i++)r=o[i],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)r=o[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=i.createContext({}),s=function(e){var t=i.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):d(d({},t),e)),r},l=function(e){var t=s(e.components);return i.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},v=i.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),p=s(r),v=n,m=p["".concat(c,".").concat(v)]||p[v]||u[v]||o;return r?i.createElement(m,d(d({ref:t},l),{},{components:r})):i.createElement(m,d({ref:t},l))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,d=new Array(o);d[0]=v;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[p]="string"==typeof e?e:n,d[1]=a;for(var s=2;s<o;s++)d[s]=r[s];return i.createElement.apply(null,d)}return i.createElement.apply(null,r)}v.displayName="MDXCreateElement"},70440:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return p}});var i=r(87462),n=r(63366),o=(r(67294),r(3905)),d=["components"],a={id:"did-discovery.diddiscovery.discoverdid",title:"DIDDiscovery.discoverDid() method",hide_title:!0},c=void 0,s={unversionedId:"api/did-discovery.diddiscovery.discoverdid",id:"api/did-discovery.diddiscovery.discoverdid",title:"DIDDiscovery.discoverDid() method",description:"DIDDiscovery.discoverDid() method",source:"@site/docs/api/did-discovery.diddiscovery.discoverdid.md",sourceDirName:"api",slug:"/api/did-discovery.diddiscovery.discoverdid",permalink:"/docs/api/did-discovery.diddiscovery.discoverdid",draft:!1,editUrl:"https://github.com/uport-project/gimly-website/edit/main/docs/api/did-discovery.diddiscovery.discoverdid.md",tags:[],version:"current",frontMatter:{id:"did-discovery.diddiscovery.discoverdid",title:"DIDDiscovery.discoverDid() method",hide_title:!0}},l={},p=[{value:"DIDDiscovery.discoverDid() method",id:"diddiscoverydiscoverdid-method",level:2},{value:"Parameters",id:"parameters",level:2}],u={toc:p},v="wrapper";function m(e){var t=e.components,r=(0,n.Z)(e,d);return(0,o.kt)(v,(0,i.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"diddiscoverydiscoverdid-method"},"DIDDiscovery.discoverDid() method"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.")),(0,o.kt)("p",null,"Queries data providers and returns DIDs with metadata"),(0,o.kt)("b",null,"Signature:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"discoverDid(args: IDIDDiscoveryDiscoverDidArgs, context: IAgentContext<any>): Promise<IDIDDiscoveryDiscoverDidResult>;\n")),(0,o.kt)("h2",{id:"parameters"},"Parameters"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"args"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/api/did-discovery.ididdiscoverydiscoverdidargs"},"IDIDDiscoveryDiscoverDidArgs")),(0,o.kt)("td",{parentName:"tr",align:null},"The param object with the properties necessary to discover DID")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"context"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/api/core-types.iagentcontext"},"IAgentContext"),"<","any",">"),(0,o.kt)("td",{parentName:"tr",align:null},"*","RESERVED","*"," This is filled by the framework when the method is called.")))),(0,o.kt)("b",null,"Returns:"),(0,o.kt)("p",null,"Promise","<",(0,o.kt)("a",{parentName:"p",href:"/docs/api/did-discovery.ididdiscoverydiscoverdidresult"},"IDIDDiscoveryDiscoverDidResult"),">"))}m.isMDXComponent=!0}}]);