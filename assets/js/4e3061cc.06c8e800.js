"use strict";(self.webpackChunkgimly_site_docs=self.webpackChunkgimly_site_docs||[]).push([[23283],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return g}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),c=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return a.createElement(d.Provider,{value:t},e.children)},l="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,s=m(e,["components","mdxType","originalType","parentName"]),l=c(n),u=r,g=l["".concat(d,".").concat(u)]||l[u]||p[u]||i;return n?a.createElement(g,o(o({ref:t},s),{},{components:n})):a.createElement(g,o({ref:t},s))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var m={};for(var d in t)hasOwnProperty.call(t,d)&&(m[d]=t[d]);m.originalType=e,m[l]="string"==typeof e?e:r,o[1]=m;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},57865:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return d},default:function(){return g},frontMatter:function(){return m},metadata:function(){return c},toc:function(){return l}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],m={id:"did-comm.ididcomm",title:"IDIDComm interface",hide_title:!0},d=void 0,c={unversionedId:"api/did-comm.ididcomm",id:"api/did-comm.ididcomm",title:"IDIDComm interface",description:"IDIDComm interface",source:"@site/docs/api/did-comm.ididcomm.md",sourceDirName:"api",slug:"/api/did-comm.ididcomm",permalink:"/docs/api/did-comm.ididcomm",draft:!1,tags:[],version:"current",frontMatter:{id:"did-comm.ididcomm",title:"IDIDComm interface",hide_title:!0}},s={},l=[{value:"IDIDComm interface",id:"ididcomm-interface",level:2},{value:"Methods",id:"methods",level:2}],p={toc:l},u="wrapper";function g(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"ididcomm-interface"},"IDIDComm interface"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.")),(0,i.kt)("p",null,"DID Comm plugin interface for ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/core.agent"},"Agent")),(0,i.kt)("p",null,"This API may change without a BREAKING CHANGE notice."),(0,i.kt)("b",null,"Signature:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface IDIDComm extends IPluginMethodMap\n")),(0,i.kt)("b",null,"Extends:")," [IPluginMethodMap](/docs/api/core-types.ipluginmethodmap)",(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Method"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/did-comm.ididcomm.getdidcommmessagemediatype"},"getDIDCommMessageMediaType(args)")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)"))," Partially decodes a possible DIDComm message string to determine the ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/did-comm.didcommmessagemediatype"},"DIDCommMessageMediaType"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/did-comm.ididcomm.packdidcommmessage"},"packDIDCommMessage(args, context)")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)"))," Packs a ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/did-comm.ididcommmessage"},"IDIDCommMessage")," using one of the ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/did-comm.didcommmessagepacking"},"DIDCommMessagePacking")," options.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/did-comm.ididcomm.senddidcommmessage"},"sendDIDCommMessage(args, context)")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("p",null,(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)"))," Sends the given message to the recipient. If a return transport is provided it will be checked whether the parent thread allows reusing the route. You cannot reuse the transport if the message was forwarded from a DIDComm mediator."),(0,i.kt)("p",null,"Emits an eventType 'DIDCommV2Message-sent' that contains the message id of packed DIDComm message ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/did-comm.ipackeddidcommmessage"},"IPackedDIDCommMessage")," after the message was sent."))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/did-comm.ididcomm.sendmessagedidcommalpha1"},"sendMessageDIDCommAlpha1(args, context)")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/api/did-comm.ididcomm.unpackdidcommmessage"},"unpackDIDCommMessage(args, context)")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("b",null,(0,i.kt)("i",null,"(BETA)"))," Unpacks a possible DIDComm message and returns the ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/did-comm.ididcommmessage"},"IDIDCommMessage")," and ",(0,i.kt)("a",{parentName:"td",href:"/docs/api/did-comm.didcommmessagepacking"},"DIDCommMessagePacking")," used to pack it.")))))}g.isMDXComponent=!0}}]);