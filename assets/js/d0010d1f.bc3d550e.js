"use strict";(self.webpackChunkgimly_site_docs=self.webpackChunkgimly_site_docs||[]).push([[15729],{3905:function(n,e,t){t.d(e,{Zo:function(){return c},kt:function(){return l}});var r=t(67294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function s(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function p(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?s(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function o(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},s=Object.keys(n);for(r=0;r<s.length;r++)t=s[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);for(r=0;r<s.length;r++)t=s[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var d=r.createContext({}),g=function(n){var e=r.useContext(d),t=e;return n&&(t="function"==typeof n?n(e):p(p({},e),n)),t},c=function(n){var e=g(n.components);return r.createElement(d.Provider,{value:e},n.children)},y="mdxType",a={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,s=n.originalType,d=n.parentName,c=o(n,["components","mdxType","originalType","parentName"]),y=g(t),u=i,l=y["".concat(d,".").concat(u)]||y[u]||a[u]||s;return t?r.createElement(l,p(p({ref:e},c),{},{components:t})):r.createElement(l,p({ref:e},c))}));function l(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var s=t.length,p=new Array(s);p[0]=u;var o={};for(var d in e)hasOwnProperty.call(e,d)&&(o[d]=e[d]);o.originalType=n,o[y]="string"==typeof n?n:i,p[1]=o;for(var g=2;g<s;g++)p[g]=t[g];return r.createElement.apply(null,p)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},41509:function(n,e,t){t.r(e),t.d(e,{assets:function(){return c},contentTitle:function(){return d},default:function(){return l},frontMatter:function(){return o},metadata:function(){return g},toc:function(){return y}});var r=t(87462),i=t(63366),s=(t(67294),t(3905)),p=["components"],o={id:"did-resolver.didresolverplugin.schema",title:"DIDResolverPlugin.schema property",hide_title:!0},d=void 0,g={unversionedId:"api/did-resolver.didresolverplugin.schema",id:"api/did-resolver.didresolverplugin.schema",title:"DIDResolverPlugin.schema property",description:"DIDResolverPlugin.schema property",source:"@site/docs/api/did-resolver.didresolverplugin.schema.md",sourceDirName:"api",slug:"/api/did-resolver.didresolverplugin.schema",permalink:"/docs/api/did-resolver.didresolverplugin.schema",draft:!1,editUrl:"https://github.com/uport-project/gimly-website/edit/main/docs/api/did-resolver.didresolverplugin.schema.md",tags:[],version:"current",frontMatter:{id:"did-resolver.didresolverplugin.schema",title:"DIDResolverPlugin.schema property",hide_title:!0}},c={},y=[{value:"DIDResolverPlugin.schema property",id:"didresolverpluginschema-property",level:2}],a={toc:y},u="wrapper";function l(n){var e=n.components,t=(0,i.Z)(n,p);return(0,s.kt)(u,(0,r.Z)({},a,t,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"didresolverpluginschema-property"},"DIDResolverPlugin.schema property"),(0,s.kt)("b",null,"Signature:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'readonly schema: {\n        components: {\n            schemas: {\n                GetDIDComponentArgs: {\n                    type: string;\n                    properties: {\n                        didDocument: {\n                            $ref: string;\n                            description: string;\n                        };\n                        didUrl: {\n                            type: string;\n                            description: string;\n                        };\n                        section: {\n                            $ref: string;\n                            description: string;\n                        };\n                    };\n                    required: string[];\n                    description: string;\n                };\n                DIDDocument: {\n                    type: string;\n                    properties: {\n                        authentication: {\n                            type: string;\n                            items: {\n                                anyOf: ({\n                                    type: string;\n                                    $ref?: undefined;\n                                } | {\n                                    $ref: string;\n                                    type?: undefined;\n                                })[];\n                            };\n                        };\n                        assertionMethod: {\n                            type: string;\n                            items: {\n                                anyOf: ({\n                                    type: string;\n                                    $ref?: undefined;\n                                } | {\n                                    $ref: string;\n                                    type?: undefined;\n                                })[];\n                            };\n                        };\n                        keyAgreement: {\n                            type: string;\n                            items: {\n                                anyOf: ({\n                                    type: string;\n                                    $ref?: undefined;\n                                } | {\n                                    $ref: string;\n                                    type?: undefined;\n                                })[];\n                            };\n                        };\n                        capabilityInvocation: {\n                            type: string;\n                            items: {\n                                anyOf: ({\n                                    type: string;\n                                    $ref?: undefined;\n                                } | {\n                                    $ref: string;\n                                    type?: undefined;\n                                })[];\n                            };\n                        };\n                        capabilityDelegation: {\n                            type: string;\n                            items: {\n                                anyOf: ({\n                                    type: string;\n                                    $ref?: undefined;\n                                } | {\n                                    $ref: string;\n                                    type?: undefined;\n                                })[];\n                            };\n                        };\n                        "@context": {\n                            anyOf: ({\n                                type: string;\n                                const: string;\n                                items?: undefined;\n                            } | {\n                                type: string;\n                                const?: undefined;\n                                items?: undefined;\n                            } | {\n                                type: string;\n                                items: {\n                                    type: string;\n                                };\n                                const?: undefined;\n                            })[];\n                        };\n                        id: {\n                            type: string;\n                        };\n                        alsoKnownAs: {\n                            type: string;\n                            items: {\n                                type: string;\n                            };\n                        };\n                        controller: {\n                            anyOf: ({\n                                type: string;\n                                items?: undefined;\n                            } | {\n                                type: string;\n                                items: {\n                                    type: string;\n                                };\n                            })[];\n                        };\n                        verificationMethod: {\n                            type: string;\n                            items: {\n                                $ref: string;\n                            };\n                        };\n                        service: {\n                            type: string;\n                            items: {\n                                $ref: string;\n                            };\n                        };\n                        publicKey: {\n                            type: string;\n                            items: {\n                                $ref: string;\n                            };\n                            deprecated: boolean;\n                        };\n                    };\n                    required: string[];\n                    description: string;\n                };\n                VerificationMethod: {\n                    type: string;\n                    properties: {\n                        id: {\n                            type: string;\n                        };\n                        type: {\n                            type: string;\n                        };\n                        controller: {\n                            type: string;\n                        };\n                        publicKeyBase58: {\n                            type: string;\n                        };\n                        publicKeyBase64: {\n                            type: string;\n                        };\n                        publicKeyJwk: {\n                            $ref: string;\n                        };\n                        publicKeyHex: {\n                            type: string;\n                        };\n                        publicKeyMultibase: {\n                            type: string;\n                        };\n                        blockchainAccountId: {\n                            type: string;\n                        };\n                        ethereumAddress: {\n                            type: string;\n                        };\n                    };\n                    required: string[];\n                    description: string;\n                };\n                JsonWebKey: {\n                    type: string;\n                    properties: {\n                        alg: {\n                            type: string;\n                        };\n                        crv: {\n                            type: string;\n                        };\n                        e: {\n                            type: string;\n                        };\n                        ext: {\n                            type: string;\n                        };\n                        key_ops: {\n                            type: string;\n                            items: {\n                                type: string;\n                            };\n                        };\n                        kid: {\n                            type: string;\n                        };\n                        kty: {\n                            type: string;\n                        };\n                        n: {\n                            type: string;\n                        };\n                        use: {\n                            type: string;\n                        };\n                        x: {\n                            type: string;\n                        };\n                        y: {\n                            type: string;\n                        };\n                    };\n                    required: string[];\n                    description: string;\n                };\n                Service: {\n                    type: string;\n                    properties: {\n                        id: {\n                            type: string;\n                        };\n                        type: {\n                            type: string;\n                        };\n                        serviceEndpoint: {\n                            anyOf: ({\n                                $ref: string;\n                                type?: undefined;\n                                items?: undefined;\n                            } | {\n                                type: string;\n                                items: {\n                                    $ref: string;\n                                };\n                                $ref?: undefined;\n                            })[];\n                        };\n                    };\n                    required: string[];\n                    description: string;\n                };\n                ServiceEndpoint: {\n                    anyOf: {\n                        type: string;\n                    }[];\n                    description: string;\n                };\n                DIDDocumentSection: {\n                    type: string;\n                    enum: string[];\n                    description: string;\n                };\n                DIDDocComponent: {\n                    anyOf: {\n                        $ref: string;\n                    }[];\n                    description: string;\n                };\n                ResolveDidArgs: {\n                    type: string;\n                    properties: {\n                        didUrl: {\n                            type: string;\n                            description: string;\n                        };\n                        options: {\n                            $ref: string;\n                            description: string;\n                        };\n                    };\n                    required: string[];\n                    description: string;\n                };\n                DIDResolutionOptions: {\n                    type: string;\n                    properties: {\n                        accept: {\n                            type: string;\n                        };\n                    };\n                    description: string;\n                };\n                DIDResolutionResult: {\n                    type: string;\n                    properties: {\n                        "@context": {\n                            anyOf: ({\n                                type: string;\n                                const: string;\n                                items?: undefined;\n                            } | {\n                                type: string;\n                                const?: undefined;\n                                items?: undefined;\n                            } | {\n                                type: string;\n                                items: {\n                                    type: string;\n                                };\n                                const?: undefined;\n                            })[];\n                        };\n                        didResolutionMetadata: {\n                            $ref: string;\n                        };\n                        didDocument: {\n                            anyOf: ({\n                                $ref: string;\n                                type?: undefined;\n                            } | {\n                                type: string;\n                                $ref?: undefined;\n                            })[];\n                        };\n                        didDocumentMetadata: {\n                            $ref: string;\n                        };\n                    };\n                    required: string[];\n                    description: string;\n                };\n                DIDResolutionMetadata: {\n                    type: string;\n                    properties: {\n                        contentType: {\n                            type: string;\n                        };\n                        error: {\n                            type: string;\n                        };\n                    };\n                    description: string;\n                };\n                DIDDocumentMetadata: {\n                    type: string;\n                    properties: {\n                        created: {\n                            type: string;\n                        };\n                        updated: {\n                            type: string;\n                        };\n                        deactivated: {\n                            type: string;\n                        };\n                        versionId: {\n                            type: string;\n                        };\n                        nextUpdate: {\n                            type: string;\n                        };\n                        nextVersionId: {\n                            type: string;\n                        };\n                        equivalentId: {\n                            type: string;\n                        };\n                        canonicalId: {\n                            type: string;\n                        };\n                    };\n                    description: string;\n                };\n            };\n            methods: {\n                getDIDComponentById: {\n                    description: string;\n                    arguments: {\n                        $ref: string;\n                    };\n                    returnType: {\n                        $ref: string;\n                    };\n                };\n                resolveDid: {\n                    description: string;\n                    arguments: {\n                        $ref: string;\n                    };\n                    returnType: {\n                        $ref: string;\n                    };\n                };\n            };\n        };\n    };\n')))}l.isMDXComponent=!0}}]);