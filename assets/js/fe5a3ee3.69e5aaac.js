"use strict";(self.webpackChunkgimly_site_docs=self.webpackChunkgimly_site_docs||[]).push([[75544],{3905:function(t,e,a){a.d(e,{Zo:function(){return s},kt:function(){return k}});var n=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function m(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function l(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?m(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):m(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},m=Object.keys(t);for(n=0;n<m.length;n++)a=m[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(t);for(n=0;n<m.length;n++)a=m[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var d=n.createContext({}),o=function(t){var e=n.useContext(d),a=e;return t&&(a="function"==typeof t?t(e):l(l({},e),t)),a},s=function(t){var e=o(t.components);return n.createElement(d.Provider,{value:e},t.children)},p="mdxType",c={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},u=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,m=t.originalType,d=t.parentName,s=i(t,["components","mdxType","originalType","parentName"]),p=o(a),u=r,k=p["".concat(d,".").concat(u)]||p[u]||c[u]||m;return a?n.createElement(k,l(l({ref:e},s),{},{components:a})):n.createElement(k,l({ref:e},s))}));function k(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var m=a.length,l=new Array(m);l[0]=u;var i={};for(var d in e)hasOwnProperty.call(e,d)&&(i[d]=e[d]);i.originalType=t,i[p]="string"==typeof t?t:r,l[1]=i;for(var o=2;o<m;o++)l[o]=a[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},32506:function(t,e,a){a.r(e),a.d(e,{assets:function(){return s},contentTitle:function(){return d},default:function(){return k},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return p}});var n=a(87462),r=a(63366),m=(a(67294),a(3905)),l=["components"],i={id:"did-comm",title:"did-comm package",hide_title:!0},d=void 0,o={unversionedId:"api/did-comm",id:"api/did-comm",title:"did-comm package",description:"did-comm package",source:"@site/docs/api/did-comm.md",sourceDirName:"api",slug:"/api/did-comm",permalink:"/docs/api/did-comm",draft:!1,tags:[],version:"current",frontMatter:{id:"did-comm",title:"did-comm package",hide_title:!0}},s={},p=[{value:"did-comm package",id:"did-comm-package",level:2},{value:"Classes",id:"classes",level:2},{value:"Enumerations",id:"enumerations",level:2},{value:"Interfaces",id:"interfaces",level:2},{value:"Type Aliases",id:"type-aliases",level:2}],c={toc:p},u="wrapper";function k(t){var e=t.components,a=(0,r.Z)(t,l);return(0,m.kt)(u,(0,n.Z)({},c,a,{components:e,mdxType:"MDXLayout"}),(0,m.kt)("h2",{id:"did-comm-package"},"did-comm package"),(0,m.kt)("p",null,"Provides a ",(0,m.kt)("a",{parentName:"p",href:"/docs/api/did-comm.didcomm"},"plugin")," for the ",(0,m.kt)("a",{parentName:"p",href:"/docs/api/core.agent"},"Agent")," that implements ",(0,m.kt)("a",{parentName:"p",href:"/docs/api/did-comm.ididcomm"},"IDIDComm")," interface. Provides a ",(0,m.kt)("a",{parentName:"p",href:"/docs/api/did-comm.didcommmessagehandler"},"plugin")," for the ",(0,m.kt)("a",{parentName:"p",href:"/docs/api/message-handler.messagehandler"},"MessageHandler")," that decrypts messages."),(0,m.kt)("h2",{id:"classes"},"Classes"),(0,m.kt)("table",null,(0,m.kt)("thead",{parentName:"table"},(0,m.kt)("tr",{parentName:"thead"},(0,m.kt)("th",{parentName:"tr",align:null},"Class"),(0,m.kt)("th",{parentName:"tr",align:null},"Description"))),(0,m.kt)("tbody",{parentName:"table"},(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.abstractdidcommtransport"},"AbstractDIDCommTransport")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("p",null,(0,m.kt)("b",null,(0,m.kt)("i",null,"(BETA)"))," Abstract implementation of ",(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.ididcommtransport"},"IDIDCommTransport"),"."),(0,m.kt)("p",null,"This API may change without a BREAKING CHANGE notice."))),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.coordinatemediationmediatormessagehandler"},"CoordinateMediationMediatorMessageHandler")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("b",null,(0,m.kt)("i",null,"(BETA)"))," A plugin for the ",(0,m.kt)("a",{parentName:"td",href:"/docs/api/message-handler.messagehandler"},"MessageHandler")," that handles Mediator Coordinator messages for the mediator role. This API may change without a BREAKING CHANGE notice.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.coordinatemediationrecipientmessagehandler"},"CoordinateMediationRecipientMessageHandler")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("b",null,(0,m.kt)("i",null,"(BETA)"))," A plugin for the ",(0,m.kt)("a",{parentName:"td",href:"/docs/api/message-handler.messagehandler"},"MessageHandler")," that handles Mediator Coordinator messages for the recipient role. This API may change without a BREAKING CHANGE notice.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.didcomm"},"DIDComm")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("p",null,(0,m.kt)("b",null,(0,m.kt)("i",null,"(BETA)"))," DID Comm plugin for ",(0,m.kt)("a",{parentName:"td",href:"/docs/api/core.agent"},"Agent")),(0,m.kt)("p",null,"This plugin provides a method of creating an encrypted message according to the initial ",(0,m.kt)("a",{parentName:"td",href:"https://github.com/decentralized-identifier/DIDComm-js"},"DIDComm-js")," implementation."))),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.didcommhttptransport"},"DIDCommHttpTransport")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("p",null,(0,m.kt)("b",null,(0,m.kt)("i",null,"(BETA)"))," Implementation of ",(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.ididcommtransport"},"IDIDCommTransport")," to provide a simple transport based on HTTP(S) requests."),(0,m.kt)("p",null,"This API may change without a BREAKING CHANGE notice."))),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.didcommmessagehandler"},"DIDCommMessageHandler")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("b",null,(0,m.kt)("i",null,"(BETA)"))," A plugin for the ",(0,m.kt)("a",{parentName:"td",href:"/docs/api/message-handler.messagehandler"},"MessageHandler")," that decrypts DIDComm messages. This API may change without a BREAKING CHANGE notice.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.pickupmediatormessagehandler"},"PickupMediatorMessageHandler")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("b",null,(0,m.kt)("i",null,"(BETA)"))," A plugin for the ",(0,m.kt)("a",{parentName:"td",href:"/docs/api/message-handler.messagehandler"},"MessageHandler")," that handles Pickup messages for the mediator role. This API may change without a BREAKING CHANGE notice.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.pickuprecipientmessagehandler"},"PickupRecipientMessageHandler")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("b",null,(0,m.kt)("i",null,"(BETA)"))," A plugin for the ",(0,m.kt)("a",{parentName:"td",href:"/docs/api/message-handler.messagehandler"},"MessageHandler")," that handles Pickup messages for the mediator role. This API may change without a BREAKING CHANGE notice.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.routingmessagehandler"},"RoutingMessageHandler")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("b",null,(0,m.kt)("i",null,"(BETA)"))," A plugin for the ",(0,m.kt)("a",{parentName:"td",href:"/docs/api/message-handler.messagehandler"},"MessageHandler")," that handles forward messages for the Routing protocol. This API may change without a BREAKING CHANGE notice.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.trustpingmessagehandler"},"TrustPingMessageHandler")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("b",null,(0,m.kt)("i",null,"(BETA)"))," A plugin for the ",(0,m.kt)("a",{parentName:"td",href:"/docs/api/message-handler.messagehandler"},"MessageHandler")," that handles Trust Ping messages. This API may change without a BREAKING CHANGE notice.")))),(0,m.kt)("h2",{id:"enumerations"},"Enumerations"),(0,m.kt)("table",null,(0,m.kt)("thead",{parentName:"table"},(0,m.kt)("tr",{parentName:"thead"},(0,m.kt)("th",{parentName:"tr",align:null},"Enumeration"),(0,m.kt)("th",{parentName:"tr",align:null},"Description"))),(0,m.kt)("tbody",{parentName:"table"},(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.didcommmessagemediatype"},"DIDCommMessageMediaType")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("p",null,(0,m.kt)("b",null,(0,m.kt)("i",null,"(BETA)"))," Represents different DIDComm v2 message encapsulation."),(0,m.kt)("p",null,"This API may change without a BREAKING CHANGE notice."))))),(0,m.kt)("h2",{id:"interfaces"},"Interfaces"),(0,m.kt)("table",null,(0,m.kt)("thead",{parentName:"table"},(0,m.kt)("tr",{parentName:"thead"},(0,m.kt)("th",{parentName:"tr",align:null},"Interface"),(0,m.kt)("th",{parentName:"tr",align:null},"Description"))),(0,m.kt)("tbody",{parentName:"table"},(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.ididcomm"},"IDIDComm")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("p",null,(0,m.kt)("b",null,(0,m.kt)("i",null,"(BETA)"))," DID Comm plugin interface for ",(0,m.kt)("a",{parentName:"td",href:"/docs/api/core.agent"},"Agent")),(0,m.kt)("p",null,"This API may change without a BREAKING CHANGE notice."))),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.ididcommmessage"},"IDIDCommMessage")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("p",null,(0,m.kt)("b",null,(0,m.kt)("i",null,"(BETA)"))," The DIDComm message structure. See ",(0,m.kt)("a",{parentName:"td",href:"https://identity.foundation/didcomm-messaging/spec/%5C#plaintext-message-structure"},"https://identity.foundation/didcomm-messaging/spec/\\#plaintext-message-structure")),(0,m.kt)("p",null,"This API may change without a BREAKING CHANGE notice."))),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.ididcommmessageattachment"},"IDIDCommMessageAttachment")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("p",null,(0,m.kt)("b",null,(0,m.kt)("i",null,"(BETA)"))," The DIDComm message structure for attachments. See ",(0,m.kt)("a",{parentName:"td",href:"https://identity.foundation/didcomm-messaging/spec/%5C#attachments"},"https://identity.foundation/didcomm-messaging/spec/\\#attachments")),(0,m.kt)("p",null,"This API may change without a BREAKING CHANGE notice."))),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.ididcommmessageattachmentdata"},"IDIDCommMessageAttachmentData")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("p",null,(0,m.kt)("b",null,(0,m.kt)("i",null,"(BETA)"))," The DIDComm message structure for data in an attachment. See ",(0,m.kt)("a",{parentName:"td",href:"https://identity.foundation/didcomm-messaging/spec/%5C#attachments"},"https://identity.foundation/didcomm-messaging/spec/\\#attachments")),(0,m.kt)("p",null,"This API may change without a BREAKING CHANGE notice."))),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.ididcommmessagemetadata"},"IDIDCommMessageMetaData")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("p",null,(0,m.kt)("b",null,(0,m.kt)("i",null,"(BETA)"))," Metadata resulting from unpacking a DIDComm v2 message."),(0,m.kt)("p",null,"This API may change without a BREAKING CHANGE notice."))),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.ididcommoptions"},"IDIDCommOptions")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("p",null,(0,m.kt)("b",null,(0,m.kt)("i",null,"(BETA)"))," Extra options when packing a DIDComm message."),(0,m.kt)("p",null,"- This API may change without a BREAKING CHANGE notice."))),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.ididcommtransport"},"IDIDCommTransport")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("p",null,(0,m.kt)("b",null,(0,m.kt)("i",null,"(BETA)"))," Common interface for transports that can be used in the ",(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.didcomm"},"DIDComm")," module."),(0,m.kt)("p",null,"This API may change without a BREAKING CHANGE notice."))),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.ididcommtransportresult"},"IDIDCommTransportResult")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("p",null,(0,m.kt)("b",null,(0,m.kt)("i",null,"(BETA)"))," Result interface for sending DIDComm messages through ",(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.ididcommtransport.send"},"IDIDCommTransport.send()"),"."),(0,m.kt)("p",null,"This API may change without a BREAKING CHANGE notice."))),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.ipackdidcommmessageargs"},"IPackDIDCommMessageArgs")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("p",null,(0,m.kt)("b",null,(0,m.kt)("i",null,"(BETA)"))," The input to the ",(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.didcomm.packdidcommmessage"},"DIDComm.packDIDCommMessage()")," method. When ",(0,m.kt)("code",null,"packing")," is ",(0,m.kt)("code",null,"authcrypt")," or ",(0,m.kt)("code",null,"jws"),", a ",(0,m.kt)("code",null,"keyRef")," MUST be provided."),(0,m.kt)("p",null,"This API may change without a BREAKING CHANGE notice."))),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.ipackeddidcommmessage"},"IPackedDIDCommMessage")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("p",null,(0,m.kt)("b",null,(0,m.kt)("i",null,"(BETA)"))," The result of packing a DIDComm v2 message. The message is always serialized as string."),(0,m.kt)("p",null,"This API may change without a BREAKING CHANGE notice."))),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.isendmessagedidcommalpha1args"},"ISendMessageDIDCommAlpha1Args")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("b",null,(0,m.kt)("i",null,"(BETA)")))),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.iunpackeddidcommmessage"},"IUnpackedDIDCommMessage")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("p",null,(0,m.kt)("b",null,(0,m.kt)("i",null,"(BETA)"))," The result of unpacking a DIDComm v2 message."),(0,m.kt)("p",null,"This API may change without a BREAKING CHANGE notice."))))),(0,m.kt)("h2",{id:"type-aliases"},"Type Aliases"),(0,m.kt)("table",null,(0,m.kt)("thead",{parentName:"table"},(0,m.kt)("tr",{parentName:"thead"},(0,m.kt)("th",{parentName:"tr",align:null},"Type Alias"),(0,m.kt)("th",{parentName:"tr",align:null},"Description"))),(0,m.kt)("tbody",{parentName:"table"},(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.didcommmessagepacking"},"DIDCommMessagePacking")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("p",null,(0,m.kt)("b",null,(0,m.kt)("i",null,"(BETA)"))," The possible types of message packing."),(0,m.kt)("p",null,(0,m.kt)("code",null,"authcrypt"),", ",(0,m.kt)("code",null,"anoncrypt"),", ",(0,m.kt)("code",null,"anoncrypt+authcrypt"),", and ",(0,m.kt)("code",null,"anoncrypt+jws")," will produce ",(0,m.kt)("code",null,"DIDCommMessageMediaType.ENCRYPTED")," messages."),(0,m.kt)("p",null,(0,m.kt)("code",null,"jws")," will produce ",(0,m.kt)("code",null,"DIDCommMessageMediaType.SIGNED")," messages."),(0,m.kt)("p",null,(0,m.kt)("code",null,"none")," will produce ",(0,m.kt)("code",null,"DIDCommMessageMediaType.PLAIN")," messages."),(0,m.kt)("p",null,"This API may change without a BREAKING CHANGE notice."))),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.iunpackdidcommmessageargs"},"IUnpackDIDCommMessageArgs")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("p",null,(0,m.kt)("b",null,(0,m.kt)("i",null,"(BETA)"))," The input to the ",(0,m.kt)("a",{parentName:"td",href:"/docs/api/did-comm.didcomm.unpackdidcommmessage"},"DIDComm.unpackDIDCommMessage()")," method."),(0,m.kt)("p",null,"This API may change without a BREAKING CHANGE notice."))))))}k.isMDXComponent=!0}}]);